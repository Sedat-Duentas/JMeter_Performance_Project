/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 213.0, "minX": 0.0, "maxY": 16310.0, "series": [{"data": [[0.0, 213.0], [0.1, 235.0], [0.2, 291.0], [0.3, 334.0], [0.4, 383.0], [0.5, 436.0], [0.6, 505.0], [0.7, 552.0], [0.8, 652.0], [0.9, 714.0], [1.0, 798.0], [1.1, 937.0], [1.2, 1083.0], [1.3, 1206.0], [1.4, 1326.0], [1.5, 1444.0], [1.6, 1498.0], [1.7, 1571.0], [1.8, 1648.0], [1.9, 1746.0], [2.0, 1843.0], [2.1, 1998.0], [2.2, 2099.0], [2.3, 2220.0], [2.4, 2336.0], [2.5, 2436.0], [2.6, 2531.0], [2.7, 2677.0], [2.8, 2767.0], [2.9, 2879.0], [3.0, 2974.0], [3.1, 3127.0], [3.2, 3197.0], [3.3, 3314.0], [3.4, 3372.0], [3.5, 3460.0], [3.6, 3551.0], [3.7, 3621.0], [3.8, 3689.0], [3.9, 3763.0], [4.0, 3855.0], [4.1, 3904.0], [4.2, 3955.0], [4.3, 3990.0], [4.4, 4048.0], [4.5, 4102.0], [4.6, 4146.0], [4.7, 4171.0], [4.8, 4209.0], [4.9, 4241.0], [5.0, 4263.0], [5.1, 4291.0], [5.2, 4316.0], [5.3, 4342.0], [5.4, 4369.0], [5.5, 4384.0], [5.6, 4395.0], [5.7, 4413.0], [5.8, 4432.0], [5.9, 4453.0], [6.0, 4464.0], [6.1, 4482.0], [6.2, 4501.0], [6.3, 4518.0], [6.4, 4530.0], [6.5, 4547.0], [6.6, 4561.0], [6.7, 4577.0], [6.8, 4585.0], [6.9, 4596.0], [7.0, 4615.0], [7.1, 4629.0], [7.2, 4643.0], [7.3, 4653.0], [7.4, 4665.0], [7.5, 4673.0], [7.6, 4683.0], [7.7, 4694.0], [7.8, 4701.0], [7.9, 4711.0], [8.0, 4718.0], [8.1, 4725.0], [8.2, 4732.0], [8.3, 4739.0], [8.4, 4747.0], [8.5, 4754.0], [8.6, 4763.0], [8.7, 4772.0], [8.8, 4777.0], [8.9, 4785.0], [9.0, 4792.0], [9.1, 4801.0], [9.2, 4811.0], [9.3, 4820.0], [9.4, 4830.0], [9.5, 4838.0], [9.6, 4846.0], [9.7, 4852.0], [9.8, 4858.0], [9.9, 4866.0], [10.0, 4876.0], [10.1, 4887.0], [10.2, 4894.0], [10.3, 4900.0], [10.4, 4905.0], [10.5, 4910.0], [10.6, 4917.0], [10.7, 4924.0], [10.8, 4932.0], [10.9, 4939.0], [11.0, 4946.0], [11.1, 4955.0], [11.2, 4963.0], [11.3, 4966.0], [11.4, 4972.0], [11.5, 4979.0], [11.6, 4985.0], [11.7, 4993.0], [11.8, 4999.0], [11.9, 5004.0], [12.0, 5009.0], [12.1, 5014.0], [12.2, 5020.0], [12.3, 5026.0], [12.4, 5031.0], [12.5, 5035.0], [12.6, 5039.0], [12.7, 5044.0], [12.8, 5054.0], [12.9, 5059.0], [13.0, 5064.0], [13.1, 5069.0], [13.2, 5073.0], [13.3, 5079.0], [13.4, 5084.0], [13.5, 5087.0], [13.6, 5090.0], [13.7, 5095.0], [13.8, 5099.0], [13.9, 5106.0], [14.0, 5111.0], [14.1, 5114.0], [14.2, 5119.0], [14.3, 5124.0], [14.4, 5130.0], [14.5, 5132.0], [14.6, 5135.0], [14.7, 5139.0], [14.8, 5142.0], [14.9, 5146.0], [15.0, 5147.0], [15.1, 5152.0], [15.2, 5155.0], [15.3, 5157.0], [15.4, 5160.0], [15.5, 5164.0], [15.6, 5167.0], [15.7, 5170.0], [15.8, 5173.0], [15.9, 5175.0], [16.0, 5179.0], [16.1, 5181.0], [16.2, 5183.0], [16.3, 5187.0], [16.4, 5192.0], [16.5, 5195.0], [16.6, 5198.0], [16.7, 5201.0], [16.8, 5204.0], [16.9, 5208.0], [17.0, 5211.0], [17.1, 5212.0], [17.2, 5214.0], [17.3, 5216.0], [17.4, 5219.0], [17.5, 5221.0], [17.6, 5224.0], [17.7, 5226.0], [17.8, 5230.0], [17.9, 5232.0], [18.0, 5234.0], [18.1, 5235.0], [18.2, 5237.0], [18.3, 5239.0], [18.4, 5241.0], [18.5, 5242.0], [18.6, 5245.0], [18.7, 5247.0], [18.8, 5249.0], [18.9, 5252.0], [19.0, 5255.0], [19.1, 5257.0], [19.2, 5259.0], [19.3, 5261.0], [19.4, 5264.0], [19.5, 5265.0], [19.6, 5267.0], [19.7, 5271.0], [19.8, 5273.0], [19.9, 5274.0], [20.0, 5276.0], [20.1, 5277.0], [20.2, 5280.0], [20.3, 5282.0], [20.4, 5284.0], [20.5, 5285.0], [20.6, 5287.0], [20.7, 5289.0], [20.8, 5292.0], [20.9, 5294.0], [21.0, 5295.0], [21.1, 5297.0], [21.2, 5300.0], [21.3, 5301.0], [21.4, 5303.0], [21.5, 5305.0], [21.6, 5308.0], [21.7, 5309.0], [21.8, 5311.0], [21.9, 5313.0], [22.0, 5315.0], [22.1, 5317.0], [22.2, 5319.0], [22.3, 5320.0], [22.4, 5322.0], [22.5, 5323.0], [22.6, 5325.0], [22.7, 5327.0], [22.8, 5328.0], [22.9, 5329.0], [23.0, 5332.0], [23.1, 5333.0], [23.2, 5334.0], [23.3, 5335.0], [23.4, 5337.0], [23.5, 5338.0], [23.6, 5340.0], [23.7, 5341.0], [23.8, 5343.0], [23.9, 5345.0], [24.0, 5346.0], [24.1, 5348.0], [24.2, 5349.0], [24.3, 5350.0], [24.4, 5352.0], [24.5, 5353.0], [24.6, 5355.0], [24.7, 5356.0], [24.8, 5357.0], [24.9, 5358.0], [25.0, 5360.0], [25.1, 5361.0], [25.2, 5363.0], [25.3, 5364.0], [25.4, 5366.0], [25.5, 5367.0], [25.6, 5369.0], [25.7, 5370.0], [25.8, 5372.0], [25.9, 5374.0], [26.0, 5375.0], [26.1, 5376.0], [26.2, 5377.0], [26.3, 5378.0], [26.4, 5380.0], [26.5, 5381.0], [26.6, 5382.0], [26.7, 5383.0], [26.8, 5385.0], [26.9, 5386.0], [27.0, 5387.0], [27.1, 5389.0], [27.2, 5389.0], [27.3, 5391.0], [27.4, 5393.0], [27.5, 5395.0], [27.6, 5396.0], [27.7, 5397.0], [27.8, 5399.0], [27.9, 5400.0], [28.0, 5401.0], [28.1, 5402.0], [28.2, 5403.0], [28.3, 5404.0], [28.4, 5406.0], [28.5, 5407.0], [28.6, 5408.0], [28.7, 5410.0], [28.8, 5411.0], [28.9, 5412.0], [29.0, 5413.0], [29.1, 5414.0], [29.2, 5416.0], [29.3, 5416.0], [29.4, 5418.0], [29.5, 5419.0], [29.6, 5420.0], [29.7, 5421.0], [29.8, 5422.0], [29.9, 5424.0], [30.0, 5425.0], [30.1, 5426.0], [30.2, 5427.0], [30.3, 5429.0], [30.4, 5429.0], [30.5, 5431.0], [30.6, 5432.0], [30.7, 5433.0], [30.8, 5434.0], [30.9, 5435.0], [31.0, 5436.0], [31.1, 5437.0], [31.2, 5438.0], [31.3, 5440.0], [31.4, 5441.0], [31.5, 5442.0], [31.6, 5443.0], [31.7, 5444.0], [31.8, 5445.0], [31.9, 5447.0], [32.0, 5448.0], [32.1, 5449.0], [32.2, 5450.0], [32.3, 5451.0], [32.4, 5452.0], [32.5, 5453.0], [32.6, 5454.0], [32.7, 5455.0], [32.8, 5456.0], [32.9, 5457.0], [33.0, 5458.0], [33.1, 5460.0], [33.2, 5461.0], [33.3, 5461.0], [33.4, 5463.0], [33.5, 5464.0], [33.6, 5465.0], [33.7, 5467.0], [33.8, 5468.0], [33.9, 5469.0], [34.0, 5469.0], [34.1, 5471.0], [34.2, 5472.0], [34.3, 5473.0], [34.4, 5474.0], [34.5, 5475.0], [34.6, 5476.0], [34.7, 5477.0], [34.8, 5478.0], [34.9, 5479.0], [35.0, 5481.0], [35.1, 5482.0], [35.2, 5483.0], [35.3, 5485.0], [35.4, 5486.0], [35.5, 5488.0], [35.6, 5489.0], [35.7, 5490.0], [35.8, 5491.0], [35.9, 5492.0], [36.0, 5493.0], [36.1, 5494.0], [36.2, 5495.0], [36.3, 5496.0], [36.4, 5497.0], [36.5, 5498.0], [36.6, 5499.0], [36.7, 5500.0], [36.8, 5500.0], [36.9, 5501.0], [37.0, 5503.0], [37.1, 5504.0], [37.2, 5505.0], [37.3, 5506.0], [37.4, 5507.0], [37.5, 5508.0], [37.6, 5509.0], [37.7, 5510.0], [37.8, 5510.0], [37.9, 5511.0], [38.0, 5513.0], [38.1, 5514.0], [38.2, 5515.0], [38.3, 5516.0], [38.4, 5517.0], [38.5, 5518.0], [38.6, 5519.0], [38.7, 5520.0], [38.8, 5523.0], [38.9, 5524.0], [39.0, 5525.0], [39.1, 5526.0], [39.2, 5526.0], [39.3, 5528.0], [39.4, 5529.0], [39.5, 5530.0], [39.6, 5532.0], [39.7, 5532.0], [39.8, 5533.0], [39.9, 5534.0], [40.0, 5536.0], [40.1, 5537.0], [40.2, 5538.0], [40.3, 5539.0], [40.4, 5540.0], [40.5, 5541.0], [40.6, 5543.0], [40.7, 5544.0], [40.8, 5545.0], [40.9, 5546.0], [41.0, 5547.0], [41.1, 5548.0], [41.2, 5549.0], [41.3, 5550.0], [41.4, 5552.0], [41.5, 5553.0], [41.6, 5554.0], [41.7, 5555.0], [41.8, 5556.0], [41.9, 5557.0], [42.0, 5558.0], [42.1, 5559.0], [42.2, 5560.0], [42.3, 5561.0], [42.4, 5562.0], [42.5, 5563.0], [42.6, 5564.0], [42.7, 5566.0], [42.8, 5567.0], [42.9, 5568.0], [43.0, 5569.0], [43.1, 5571.0], [43.2, 5572.0], [43.3, 5573.0], [43.4, 5574.0], [43.5, 5576.0], [43.6, 5576.0], [43.7, 5577.0], [43.8, 5579.0], [43.9, 5580.0], [44.0, 5581.0], [44.1, 5583.0], [44.2, 5583.0], [44.3, 5584.0], [44.4, 5586.0], [44.5, 5587.0], [44.6, 5588.0], [44.7, 5589.0], [44.8, 5591.0], [44.9, 5591.0], [45.0, 5592.0], [45.1, 5594.0], [45.2, 5595.0], [45.3, 5596.0], [45.4, 5597.0], [45.5, 5598.0], [45.6, 5599.0], [45.7, 5600.0], [45.8, 5601.0], [45.9, 5603.0], [46.0, 5604.0], [46.1, 5605.0], [46.2, 5606.0], [46.3, 5607.0], [46.4, 5608.0], [46.5, 5609.0], [46.6, 5610.0], [46.7, 5611.0], [46.8, 5613.0], [46.9, 5613.0], [47.0, 5614.0], [47.1, 5615.0], [47.2, 5617.0], [47.3, 5618.0], [47.4, 5619.0], [47.5, 5621.0], [47.6, 5622.0], [47.7, 5623.0], [47.8, 5624.0], [47.9, 5625.0], [48.0, 5626.0], [48.1, 5628.0], [48.2, 5628.0], [48.3, 5630.0], [48.4, 5632.0], [48.5, 5634.0], [48.6, 5635.0], [48.7, 5636.0], [48.8, 5637.0], [48.9, 5638.0], [49.0, 5639.0], [49.1, 5641.0], [49.2, 5642.0], [49.3, 5644.0], [49.4, 5646.0], [49.5, 5646.0], [49.6, 5648.0], [49.7, 5650.0], [49.8, 5650.0], [49.9, 5651.0], [50.0, 5653.0], [50.1, 5654.0], [50.2, 5655.0], [50.3, 5656.0], [50.4, 5658.0], [50.5, 5659.0], [50.6, 5660.0], [50.7, 5662.0], [50.8, 5662.0], [50.9, 5663.0], [51.0, 5665.0], [51.1, 5666.0], [51.2, 5668.0], [51.3, 5669.0], [51.4, 5671.0], [51.5, 5672.0], [51.6, 5673.0], [51.7, 5674.0], [51.8, 5676.0], [51.9, 5677.0], [52.0, 5679.0], [52.1, 5680.0], [52.2, 5681.0], [52.3, 5682.0], [52.4, 5684.0], [52.5, 5685.0], [52.6, 5687.0], [52.7, 5687.0], [52.8, 5688.0], [52.9, 5690.0], [53.0, 5691.0], [53.1, 5692.0], [53.2, 5694.0], [53.3, 5695.0], [53.4, 5696.0], [53.5, 5697.0], [53.6, 5699.0], [53.7, 5700.0], [53.8, 5702.0], [53.9, 5703.0], [54.0, 5704.0], [54.1, 5705.0], [54.2, 5707.0], [54.3, 5708.0], [54.4, 5710.0], [54.5, 5711.0], [54.6, 5713.0], [54.7, 5714.0], [54.8, 5716.0], [54.9, 5717.0], [55.0, 5718.0], [55.1, 5719.0], [55.2, 5721.0], [55.3, 5723.0], [55.4, 5724.0], [55.5, 5726.0], [55.6, 5728.0], [55.7, 5730.0], [55.8, 5731.0], [55.9, 5732.0], [56.0, 5733.0], [56.1, 5734.0], [56.2, 5736.0], [56.3, 5738.0], [56.4, 5739.0], [56.5, 5740.0], [56.6, 5741.0], [56.7, 5743.0], [56.8, 5745.0], [56.9, 5747.0], [57.0, 5749.0], [57.1, 5750.0], [57.2, 5752.0], [57.3, 5753.0], [57.4, 5755.0], [57.5, 5757.0], [57.6, 5759.0], [57.7, 5761.0], [57.8, 5763.0], [57.9, 5764.0], [58.0, 5766.0], [58.1, 5768.0], [58.2, 5769.0], [58.3, 5770.0], [58.4, 5772.0], [58.5, 5774.0], [58.6, 5776.0], [58.7, 5777.0], [58.8, 5779.0], [58.9, 5781.0], [59.0, 5782.0], [59.1, 5783.0], [59.2, 5785.0], [59.3, 5786.0], [59.4, 5788.0], [59.5, 5790.0], [59.6, 5791.0], [59.7, 5793.0], [59.8, 5794.0], [59.9, 5796.0], [60.0, 5797.0], [60.1, 5800.0], [60.2, 5802.0], [60.3, 5804.0], [60.4, 5805.0], [60.5, 5807.0], [60.6, 5808.0], [60.7, 5810.0], [60.8, 5812.0], [60.9, 5814.0], [61.0, 5815.0], [61.1, 5817.0], [61.2, 5818.0], [61.3, 5820.0], [61.4, 5822.0], [61.5, 5823.0], [61.6, 5825.0], [61.7, 5827.0], [61.8, 5829.0], [61.9, 5832.0], [62.0, 5834.0], [62.1, 5836.0], [62.2, 5838.0], [62.3, 5840.0], [62.4, 5842.0], [62.5, 5844.0], [62.6, 5846.0], [62.7, 5848.0], [62.8, 5849.0], [62.9, 5851.0], [63.0, 5853.0], [63.1, 5855.0], [63.2, 5856.0], [63.3, 5859.0], [63.4, 5861.0], [63.5, 5863.0], [63.6, 5864.0], [63.7, 5865.0], [63.8, 5868.0], [63.9, 5869.0], [64.0, 5872.0], [64.1, 5874.0], [64.2, 5876.0], [64.3, 5877.0], [64.4, 5879.0], [64.5, 5881.0], [64.6, 5883.0], [64.7, 5885.0], [64.8, 5887.0], [64.9, 5890.0], [65.0, 5892.0], [65.1, 5894.0], [65.2, 5896.0], [65.3, 5898.0], [65.4, 5900.0], [65.5, 5901.0], [65.6, 5903.0], [65.7, 5905.0], [65.8, 5906.0], [65.9, 5908.0], [66.0, 5909.0], [66.1, 5912.0], [66.2, 5915.0], [66.3, 5917.0], [66.4, 5919.0], [66.5, 5920.0], [66.6, 5923.0], [66.7, 5925.0], [66.8, 5927.0], [66.9, 5928.0], [67.0, 5931.0], [67.1, 5933.0], [67.2, 5935.0], [67.3, 5937.0], [67.4, 5940.0], [67.5, 5942.0], [67.6, 5944.0], [67.7, 5947.0], [67.8, 5949.0], [67.9, 5951.0], [68.0, 5953.0], [68.1, 5956.0], [68.2, 5958.0], [68.3, 5960.0], [68.4, 5963.0], [68.5, 5965.0], [68.6, 5967.0], [68.7, 5970.0], [68.8, 5972.0], [68.9, 5975.0], [69.0, 5978.0], [69.1, 5980.0], [69.2, 5982.0], [69.3, 5984.0], [69.4, 5987.0], [69.5, 5989.0], [69.6, 5992.0], [69.7, 5994.0], [69.8, 5997.0], [69.9, 6000.0], [70.0, 6001.0], [70.1, 6004.0], [70.2, 6005.0], [70.3, 6009.0], [70.4, 6011.0], [70.5, 6014.0], [70.6, 6016.0], [70.7, 6019.0], [70.8, 6022.0], [70.9, 6024.0], [71.0, 6027.0], [71.1, 6030.0], [71.2, 6032.0], [71.3, 6034.0], [71.4, 6038.0], [71.5, 6041.0], [71.6, 6044.0], [71.7, 6046.0], [71.8, 6050.0], [71.9, 6053.0], [72.0, 6056.0], [72.1, 6060.0], [72.2, 6062.0], [72.3, 6066.0], [72.4, 6068.0], [72.5, 6070.0], [72.6, 6074.0], [72.7, 6077.0], [72.8, 6079.0], [72.9, 6081.0], [73.0, 6084.0], [73.1, 6089.0], [73.2, 6091.0], [73.3, 6093.0], [73.4, 6096.0], [73.5, 6097.0], [73.6, 6100.0], [73.7, 6103.0], [73.8, 6107.0], [73.9, 6110.0], [74.0, 6112.0], [74.1, 6114.0], [74.2, 6117.0], [74.3, 6120.0], [74.4, 6123.0], [74.5, 6125.0], [74.6, 6129.0], [74.7, 6132.0], [74.8, 6135.0], [74.9, 6138.0], [75.0, 6141.0], [75.1, 6143.0], [75.2, 6147.0], [75.3, 6150.0], [75.4, 6153.0], [75.5, 6156.0], [75.6, 6159.0], [75.7, 6162.0], [75.8, 6165.0], [75.9, 6167.0], [76.0, 6170.0], [76.1, 6173.0], [76.2, 6176.0], [76.3, 6179.0], [76.4, 6181.0], [76.5, 6183.0], [76.6, 6187.0], [76.7, 6190.0], [76.8, 6191.0], [76.9, 6194.0], [77.0, 6196.0], [77.1, 6200.0], [77.2, 6203.0], [77.3, 6205.0], [77.4, 6209.0], [77.5, 6210.0], [77.6, 6213.0], [77.7, 6216.0], [77.8, 6219.0], [77.9, 6221.0], [78.0, 6224.0], [78.1, 6227.0], [78.2, 6229.0], [78.3, 6233.0], [78.4, 6235.0], [78.5, 6239.0], [78.6, 6242.0], [78.7, 6244.0], [78.8, 6247.0], [78.9, 6250.0], [79.0, 6254.0], [79.1, 6257.0], [79.2, 6260.0], [79.3, 6263.0], [79.4, 6266.0], [79.5, 6269.0], [79.6, 6272.0], [79.7, 6277.0], [79.8, 6280.0], [79.9, 6282.0], [80.0, 6288.0], [80.1, 6290.0], [80.2, 6295.0], [80.3, 6299.0], [80.4, 6302.0], [80.5, 6306.0], [80.6, 6309.0], [80.7, 6313.0], [80.8, 6316.0], [80.9, 6321.0], [81.0, 6324.0], [81.1, 6328.0], [81.2, 6332.0], [81.3, 6337.0], [81.4, 6341.0], [81.5, 6344.0], [81.6, 6350.0], [81.7, 6355.0], [81.8, 6358.0], [81.9, 6361.0], [82.0, 6366.0], [82.1, 6371.0], [82.2, 6376.0], [82.3, 6380.0], [82.4, 6386.0], [82.5, 6390.0], [82.6, 6393.0], [82.7, 6398.0], [82.8, 6402.0], [82.9, 6405.0], [83.0, 6409.0], [83.1, 6415.0], [83.2, 6419.0], [83.3, 6421.0], [83.4, 6425.0], [83.5, 6431.0], [83.6, 6435.0], [83.7, 6440.0], [83.8, 6442.0], [83.9, 6447.0], [84.0, 6451.0], [84.1, 6455.0], [84.2, 6460.0], [84.3, 6464.0], [84.4, 6469.0], [84.5, 6472.0], [84.6, 6477.0], [84.7, 6482.0], [84.8, 6487.0], [84.9, 6493.0], [85.0, 6496.0], [85.1, 6501.0], [85.2, 6504.0], [85.3, 6508.0], [85.4, 6514.0], [85.5, 6519.0], [85.6, 6521.0], [85.7, 6527.0], [85.8, 6534.0], [85.9, 6540.0], [86.0, 6546.0], [86.1, 6553.0], [86.2, 6562.0], [86.3, 6566.0], [86.4, 6571.0], [86.5, 6576.0], [86.6, 6581.0], [86.7, 6587.0], [86.8, 6591.0], [86.9, 6596.0], [87.0, 6600.0], [87.1, 6605.0], [87.2, 6609.0], [87.3, 6615.0], [87.4, 6620.0], [87.5, 6623.0], [87.6, 6628.0], [87.7, 6632.0], [87.8, 6636.0], [87.9, 6640.0], [88.0, 6645.0], [88.1, 6651.0], [88.2, 6656.0], [88.3, 6662.0], [88.4, 6668.0], [88.5, 6674.0], [88.6, 6681.0], [88.7, 6687.0], [88.8, 6694.0], [88.9, 6701.0], [89.0, 6706.0], [89.1, 6714.0], [89.2, 6721.0], [89.3, 6728.0], [89.4, 6739.0], [89.5, 6746.0], [89.6, 6754.0], [89.7, 6761.0], [89.8, 6767.0], [89.9, 6775.0], [90.0, 6784.0], [90.1, 6791.0], [90.2, 6800.0], [90.3, 6808.0], [90.4, 6818.0], [90.5, 6824.0], [90.6, 6832.0], [90.7, 6841.0], [90.8, 6849.0], [90.9, 6858.0], [91.0, 6866.0], [91.1, 6877.0], [91.2, 6889.0], [91.3, 6901.0], [91.4, 6911.0], [91.5, 6920.0], [91.6, 6932.0], [91.7, 6942.0], [91.8, 6953.0], [91.9, 6967.0], [92.0, 6986.0], [92.1, 7003.0], [92.2, 7028.0], [92.3, 7042.0], [92.4, 7056.0], [92.5, 7080.0], [92.6, 7091.0], [92.7, 7106.0], [92.8, 7122.0], [92.9, 7143.0], [93.0, 7157.0], [93.1, 7167.0], [93.2, 7181.0], [93.3, 7199.0], [93.4, 7213.0], [93.5, 7228.0], [93.6, 7243.0], [93.7, 7262.0], [93.8, 7280.0], [93.9, 7300.0], [94.0, 7314.0], [94.1, 7331.0], [94.2, 7353.0], [94.3, 7376.0], [94.4, 7396.0], [94.5, 7421.0], [94.6, 7443.0], [94.7, 7458.0], [94.8, 7485.0], [94.9, 7508.0], [95.0, 7534.0], [95.1, 7565.0], [95.2, 7585.0], [95.3, 7610.0], [95.4, 7633.0], [95.5, 7677.0], [95.6, 7709.0], [95.7, 7742.0], [95.8, 7768.0], [95.9, 7803.0], [96.0, 7843.0], [96.1, 7885.0], [96.2, 7938.0], [96.3, 7976.0], [96.4, 8011.0], [96.5, 8059.0], [96.6, 8110.0], [96.7, 8137.0], [96.8, 8170.0], [96.9, 8220.0], [97.0, 8288.0], [97.1, 8329.0], [97.2, 8400.0], [97.3, 8452.0], [97.4, 8523.0], [97.5, 8584.0], [97.6, 8675.0], [97.7, 8751.0], [97.8, 8808.0], [97.9, 8867.0], [98.0, 8945.0], [98.1, 9018.0], [98.2, 9141.0], [98.3, 9246.0], [98.4, 9370.0], [98.5, 9480.0], [98.6, 9608.0], [98.7, 9718.0], [98.8, 9805.0], [98.9, 9866.0], [99.0, 9945.0], [99.1, 10056.0], [99.2, 10142.0], [99.3, 10258.0], [99.4, 10368.0], [99.5, 10461.0], [99.6, 10747.0], [99.7, 11219.0], [99.8, 11893.0], [99.9, 13157.0], [100.0, 16310.0]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[0.0, 213.0], [0.1, 235.0], [0.2, 291.0], [0.3, 334.0], [0.4, 383.0], [0.5, 436.0], [0.6, 505.0], [0.7, 552.0], [0.8, 652.0], [0.9, 714.0], [1.0, 798.0], [1.1, 937.0], [1.2, 1083.0], [1.3, 1206.0], [1.4, 1326.0], [1.5, 1444.0], [1.6, 1498.0], [1.7, 1571.0], [1.8, 1648.0], [1.9, 1746.0], [2.0, 1843.0], [2.1, 1998.0], [2.2, 2099.0], [2.3, 2220.0], [2.4, 2336.0], [2.5, 2436.0], [2.6, 2531.0], [2.7, 2677.0], [2.8, 2767.0], [2.9, 2879.0], [3.0, 2974.0], [3.1, 3127.0], [3.2, 3197.0], [3.3, 3314.0], [3.4, 3372.0], [3.5, 3460.0], [3.6, 3551.0], [3.7, 3621.0], [3.8, 3689.0], [3.9, 3763.0], [4.0, 3855.0], [4.1, 3904.0], [4.2, 3955.0], [4.3, 3990.0], [4.4, 4048.0], [4.5, 4102.0], [4.6, 4146.0], [4.7, 4171.0], [4.8, 4209.0], [4.9, 4241.0], [5.0, 4263.0], [5.1, 4291.0], [5.2, 4316.0], [5.3, 4342.0], [5.4, 4369.0], [5.5, 4384.0], [5.6, 4395.0], [5.7, 4413.0], [5.8, 4432.0], [5.9, 4453.0], [6.0, 4464.0], [6.1, 4482.0], [6.2, 4501.0], [6.3, 4518.0], [6.4, 4530.0], [6.5, 4547.0], [6.6, 4561.0], [6.7, 4577.0], [6.8, 4585.0], [6.9, 4596.0], [7.0, 4615.0], [7.1, 4629.0], [7.2, 4643.0], [7.3, 4653.0], [7.4, 4665.0], [7.5, 4673.0], [7.6, 4683.0], [7.7, 4694.0], [7.8, 4701.0], [7.9, 4711.0], [8.0, 4718.0], [8.1, 4725.0], [8.2, 4732.0], [8.3, 4739.0], [8.4, 4747.0], [8.5, 4754.0], [8.6, 4763.0], [8.7, 4772.0], [8.8, 4777.0], [8.9, 4785.0], [9.0, 4792.0], [9.1, 4801.0], [9.2, 4811.0], [9.3, 4820.0], [9.4, 4830.0], [9.5, 4838.0], [9.6, 4846.0], [9.7, 4852.0], [9.8, 4858.0], [9.9, 4866.0], [10.0, 4876.0], [10.1, 4887.0], [10.2, 4894.0], [10.3, 4900.0], [10.4, 4905.0], [10.5, 4910.0], [10.6, 4917.0], [10.7, 4924.0], [10.8, 4932.0], [10.9, 4939.0], [11.0, 4946.0], [11.1, 4955.0], [11.2, 4963.0], [11.3, 4966.0], [11.4, 4972.0], [11.5, 4979.0], [11.6, 4985.0], [11.7, 4993.0], [11.8, 4999.0], [11.9, 5004.0], [12.0, 5009.0], [12.1, 5014.0], [12.2, 5020.0], [12.3, 5026.0], [12.4, 5031.0], [12.5, 5035.0], [12.6, 5039.0], [12.7, 5044.0], [12.8, 5054.0], [12.9, 5059.0], [13.0, 5064.0], [13.1, 5069.0], [13.2, 5073.0], [13.3, 5079.0], [13.4, 5084.0], [13.5, 5087.0], [13.6, 5090.0], [13.7, 5095.0], [13.8, 5099.0], [13.9, 5106.0], [14.0, 5111.0], [14.1, 5114.0], [14.2, 5119.0], [14.3, 5124.0], [14.4, 5130.0], [14.5, 5132.0], [14.6, 5135.0], [14.7, 5139.0], [14.8, 5142.0], [14.9, 5146.0], [15.0, 5147.0], [15.1, 5152.0], [15.2, 5155.0], [15.3, 5157.0], [15.4, 5160.0], [15.5, 5164.0], [15.6, 5167.0], [15.7, 5170.0], [15.8, 5173.0], [15.9, 5175.0], [16.0, 5179.0], [16.1, 5181.0], [16.2, 5183.0], [16.3, 5187.0], [16.4, 5192.0], [16.5, 5195.0], [16.6, 5198.0], [16.7, 5201.0], [16.8, 5204.0], [16.9, 5208.0], [17.0, 5211.0], [17.1, 5212.0], [17.2, 5214.0], [17.3, 5216.0], [17.4, 5219.0], [17.5, 5221.0], [17.6, 5224.0], [17.7, 5226.0], [17.8, 5230.0], [17.9, 5232.0], [18.0, 5234.0], [18.1, 5235.0], [18.2, 5237.0], [18.3, 5239.0], [18.4, 5241.0], [18.5, 5242.0], [18.6, 5245.0], [18.7, 5247.0], [18.8, 5249.0], [18.9, 5252.0], [19.0, 5255.0], [19.1, 5257.0], [19.2, 5259.0], [19.3, 5261.0], [19.4, 5264.0], [19.5, 5265.0], [19.6, 5267.0], [19.7, 5271.0], [19.8, 5273.0], [19.9, 5274.0], [20.0, 5276.0], [20.1, 5277.0], [20.2, 5280.0], [20.3, 5282.0], [20.4, 5284.0], [20.5, 5285.0], [20.6, 5287.0], [20.7, 5289.0], [20.8, 5292.0], [20.9, 5294.0], [21.0, 5295.0], [21.1, 5297.0], [21.2, 5300.0], [21.3, 5301.0], [21.4, 5303.0], [21.5, 5305.0], [21.6, 5308.0], [21.7, 5309.0], [21.8, 5311.0], [21.9, 5313.0], [22.0, 5315.0], [22.1, 5317.0], [22.2, 5319.0], [22.3, 5320.0], [22.4, 5322.0], [22.5, 5323.0], [22.6, 5325.0], [22.7, 5327.0], [22.8, 5328.0], [22.9, 5329.0], [23.0, 5332.0], [23.1, 5333.0], [23.2, 5334.0], [23.3, 5335.0], [23.4, 5337.0], [23.5, 5338.0], [23.6, 5340.0], [23.7, 5341.0], [23.8, 5343.0], [23.9, 5345.0], [24.0, 5346.0], [24.1, 5348.0], [24.2, 5349.0], [24.3, 5350.0], [24.4, 5352.0], [24.5, 5353.0], [24.6, 5355.0], [24.7, 5356.0], [24.8, 5357.0], [24.9, 5358.0], [25.0, 5360.0], [25.1, 5361.0], [25.2, 5363.0], [25.3, 5364.0], [25.4, 5366.0], [25.5, 5367.0], [25.6, 5369.0], [25.7, 5370.0], [25.8, 5372.0], [25.9, 5374.0], [26.0, 5375.0], [26.1, 5376.0], [26.2, 5377.0], [26.3, 5378.0], [26.4, 5380.0], [26.5, 5381.0], [26.6, 5382.0], [26.7, 5383.0], [26.8, 5385.0], [26.9, 5386.0], [27.0, 5387.0], [27.1, 5389.0], [27.2, 5389.0], [27.3, 5391.0], [27.4, 5393.0], [27.5, 5395.0], [27.6, 5396.0], [27.7, 5397.0], [27.8, 5399.0], [27.9, 5400.0], [28.0, 5401.0], [28.1, 5402.0], [28.2, 5403.0], [28.3, 5404.0], [28.4, 5406.0], [28.5, 5407.0], [28.6, 5408.0], [28.7, 5410.0], [28.8, 5411.0], [28.9, 5412.0], [29.0, 5413.0], [29.1, 5414.0], [29.2, 5416.0], [29.3, 5416.0], [29.4, 5418.0], [29.5, 5419.0], [29.6, 5420.0], [29.7, 5421.0], [29.8, 5422.0], [29.9, 5424.0], [30.0, 5425.0], [30.1, 5426.0], [30.2, 5427.0], [30.3, 5429.0], [30.4, 5429.0], [30.5, 5431.0], [30.6, 5432.0], [30.7, 5433.0], [30.8, 5434.0], [30.9, 5435.0], [31.0, 5436.0], [31.1, 5437.0], [31.2, 5438.0], [31.3, 5440.0], [31.4, 5441.0], [31.5, 5442.0], [31.6, 5443.0], [31.7, 5444.0], [31.8, 5445.0], [31.9, 5447.0], [32.0, 5448.0], [32.1, 5449.0], [32.2, 5450.0], [32.3, 5451.0], [32.4, 5452.0], [32.5, 5453.0], [32.6, 5454.0], [32.7, 5455.0], [32.8, 5456.0], [32.9, 5457.0], [33.0, 5458.0], [33.1, 5460.0], [33.2, 5461.0], [33.3, 5461.0], [33.4, 5463.0], [33.5, 5464.0], [33.6, 5465.0], [33.7, 5467.0], [33.8, 5468.0], [33.9, 5469.0], [34.0, 5469.0], [34.1, 5471.0], [34.2, 5472.0], [34.3, 5473.0], [34.4, 5474.0], [34.5, 5475.0], [34.6, 5476.0], [34.7, 5477.0], [34.8, 5478.0], [34.9, 5479.0], [35.0, 5481.0], [35.1, 5482.0], [35.2, 5483.0], [35.3, 5485.0], [35.4, 5486.0], [35.5, 5488.0], [35.6, 5489.0], [35.7, 5490.0], [35.8, 5491.0], [35.9, 5492.0], [36.0, 5493.0], [36.1, 5494.0], [36.2, 5495.0], [36.3, 5496.0], [36.4, 5497.0], [36.5, 5498.0], [36.6, 5499.0], [36.7, 5500.0], [36.8, 5500.0], [36.9, 5501.0], [37.0, 5503.0], [37.1, 5504.0], [37.2, 5505.0], [37.3, 5506.0], [37.4, 5507.0], [37.5, 5508.0], [37.6, 5509.0], [37.7, 5510.0], [37.8, 5510.0], [37.9, 5511.0], [38.0, 5513.0], [38.1, 5514.0], [38.2, 5515.0], [38.3, 5516.0], [38.4, 5517.0], [38.5, 5518.0], [38.6, 5519.0], [38.7, 5520.0], [38.8, 5523.0], [38.9, 5524.0], [39.0, 5525.0], [39.1, 5526.0], [39.2, 5526.0], [39.3, 5528.0], [39.4, 5529.0], [39.5, 5530.0], [39.6, 5532.0], [39.7, 5532.0], [39.8, 5533.0], [39.9, 5534.0], [40.0, 5536.0], [40.1, 5537.0], [40.2, 5538.0], [40.3, 5539.0], [40.4, 5540.0], [40.5, 5541.0], [40.6, 5543.0], [40.7, 5544.0], [40.8, 5545.0], [40.9, 5546.0], [41.0, 5547.0], [41.1, 5548.0], [41.2, 5549.0], [41.3, 5550.0], [41.4, 5552.0], [41.5, 5553.0], [41.6, 5554.0], [41.7, 5555.0], [41.8, 5556.0], [41.9, 5557.0], [42.0, 5558.0], [42.1, 5559.0], [42.2, 5560.0], [42.3, 5561.0], [42.4, 5562.0], [42.5, 5563.0], [42.6, 5564.0], [42.7, 5566.0], [42.8, 5567.0], [42.9, 5568.0], [43.0, 5569.0], [43.1, 5571.0], [43.2, 5572.0], [43.3, 5573.0], [43.4, 5574.0], [43.5, 5576.0], [43.6, 5576.0], [43.7, 5577.0], [43.8, 5579.0], [43.9, 5580.0], [44.0, 5581.0], [44.1, 5583.0], [44.2, 5583.0], [44.3, 5584.0], [44.4, 5586.0], [44.5, 5587.0], [44.6, 5588.0], [44.7, 5589.0], [44.8, 5591.0], [44.9, 5591.0], [45.0, 5592.0], [45.1, 5594.0], [45.2, 5595.0], [45.3, 5596.0], [45.4, 5597.0], [45.5, 5598.0], [45.6, 5599.0], [45.7, 5600.0], [45.8, 5601.0], [45.9, 5603.0], [46.0, 5604.0], [46.1, 5605.0], [46.2, 5606.0], [46.3, 5607.0], [46.4, 5608.0], [46.5, 5609.0], [46.6, 5610.0], [46.7, 5611.0], [46.8, 5613.0], [46.9, 5613.0], [47.0, 5614.0], [47.1, 5615.0], [47.2, 5617.0], [47.3, 5618.0], [47.4, 5619.0], [47.5, 5621.0], [47.6, 5622.0], [47.7, 5623.0], [47.8, 5624.0], [47.9, 5625.0], [48.0, 5626.0], [48.1, 5628.0], [48.2, 5628.0], [48.3, 5630.0], [48.4, 5632.0], [48.5, 5634.0], [48.6, 5635.0], [48.7, 5636.0], [48.8, 5637.0], [48.9, 5638.0], [49.0, 5639.0], [49.1, 5641.0], [49.2, 5642.0], [49.3, 5644.0], [49.4, 5646.0], [49.5, 5646.0], [49.6, 5648.0], [49.7, 5650.0], [49.8, 5650.0], [49.9, 5651.0], [50.0, 5653.0], [50.1, 5654.0], [50.2, 5655.0], [50.3, 5656.0], [50.4, 5658.0], [50.5, 5659.0], [50.6, 5660.0], [50.7, 5662.0], [50.8, 5662.0], [50.9, 5663.0], [51.0, 5665.0], [51.1, 5666.0], [51.2, 5668.0], [51.3, 5669.0], [51.4, 5671.0], [51.5, 5672.0], [51.6, 5673.0], [51.7, 5674.0], [51.8, 5676.0], [51.9, 5677.0], [52.0, 5679.0], [52.1, 5680.0], [52.2, 5681.0], [52.3, 5682.0], [52.4, 5684.0], [52.5, 5685.0], [52.6, 5687.0], [52.7, 5687.0], [52.8, 5688.0], [52.9, 5690.0], [53.0, 5691.0], [53.1, 5692.0], [53.2, 5694.0], [53.3, 5695.0], [53.4, 5696.0], [53.5, 5697.0], [53.6, 5699.0], [53.7, 5700.0], [53.8, 5702.0], [53.9, 5703.0], [54.0, 5704.0], [54.1, 5705.0], [54.2, 5707.0], [54.3, 5708.0], [54.4, 5710.0], [54.5, 5711.0], [54.6, 5713.0], [54.7, 5714.0], [54.8, 5716.0], [54.9, 5717.0], [55.0, 5718.0], [55.1, 5719.0], [55.2, 5721.0], [55.3, 5723.0], [55.4, 5724.0], [55.5, 5726.0], [55.6, 5728.0], [55.7, 5730.0], [55.8, 5731.0], [55.9, 5732.0], [56.0, 5733.0], [56.1, 5734.0], [56.2, 5736.0], [56.3, 5738.0], [56.4, 5739.0], [56.5, 5740.0], [56.6, 5741.0], [56.7, 5743.0], [56.8, 5745.0], [56.9, 5747.0], [57.0, 5749.0], [57.1, 5750.0], [57.2, 5752.0], [57.3, 5753.0], [57.4, 5755.0], [57.5, 5757.0], [57.6, 5759.0], [57.7, 5761.0], [57.8, 5763.0], [57.9, 5764.0], [58.0, 5766.0], [58.1, 5768.0], [58.2, 5769.0], [58.3, 5770.0], [58.4, 5772.0], [58.5, 5774.0], [58.6, 5776.0], [58.7, 5777.0], [58.8, 5779.0], [58.9, 5781.0], [59.0, 5782.0], [59.1, 5783.0], [59.2, 5785.0], [59.3, 5786.0], [59.4, 5788.0], [59.5, 5790.0], [59.6, 5791.0], [59.7, 5793.0], [59.8, 5794.0], [59.9, 5796.0], [60.0, 5797.0], [60.1, 5800.0], [60.2, 5802.0], [60.3, 5804.0], [60.4, 5805.0], [60.5, 5807.0], [60.6, 5808.0], [60.7, 5810.0], [60.8, 5812.0], [60.9, 5814.0], [61.0, 5815.0], [61.1, 5817.0], [61.2, 5818.0], [61.3, 5820.0], [61.4, 5822.0], [61.5, 5823.0], [61.6, 5825.0], [61.7, 5827.0], [61.8, 5829.0], [61.9, 5832.0], [62.0, 5834.0], [62.1, 5836.0], [62.2, 5838.0], [62.3, 5840.0], [62.4, 5842.0], [62.5, 5844.0], [62.6, 5846.0], [62.7, 5848.0], [62.8, 5849.0], [62.9, 5851.0], [63.0, 5853.0], [63.1, 5855.0], [63.2, 5856.0], [63.3, 5859.0], [63.4, 5861.0], [63.5, 5863.0], [63.6, 5864.0], [63.7, 5865.0], [63.8, 5868.0], [63.9, 5869.0], [64.0, 5872.0], [64.1, 5874.0], [64.2, 5876.0], [64.3, 5877.0], [64.4, 5879.0], [64.5, 5881.0], [64.6, 5883.0], [64.7, 5885.0], [64.8, 5887.0], [64.9, 5890.0], [65.0, 5892.0], [65.1, 5894.0], [65.2, 5896.0], [65.3, 5898.0], [65.4, 5900.0], [65.5, 5901.0], [65.6, 5903.0], [65.7, 5905.0], [65.8, 5906.0], [65.9, 5908.0], [66.0, 5909.0], [66.1, 5912.0], [66.2, 5915.0], [66.3, 5917.0], [66.4, 5919.0], [66.5, 5920.0], [66.6, 5923.0], [66.7, 5925.0], [66.8, 5927.0], [66.9, 5928.0], [67.0, 5931.0], [67.1, 5933.0], [67.2, 5935.0], [67.3, 5937.0], [67.4, 5940.0], [67.5, 5942.0], [67.6, 5944.0], [67.7, 5947.0], [67.8, 5949.0], [67.9, 5951.0], [68.0, 5953.0], [68.1, 5956.0], [68.2, 5958.0], [68.3, 5960.0], [68.4, 5963.0], [68.5, 5965.0], [68.6, 5967.0], [68.7, 5970.0], [68.8, 5972.0], [68.9, 5975.0], [69.0, 5978.0], [69.1, 5980.0], [69.2, 5982.0], [69.3, 5984.0], [69.4, 5987.0], [69.5, 5989.0], [69.6, 5992.0], [69.7, 5994.0], [69.8, 5997.0], [69.9, 6000.0], [70.0, 6001.0], [70.1, 6004.0], [70.2, 6005.0], [70.3, 6009.0], [70.4, 6011.0], [70.5, 6014.0], [70.6, 6016.0], [70.7, 6019.0], [70.8, 6022.0], [70.9, 6024.0], [71.0, 6027.0], [71.1, 6030.0], [71.2, 6032.0], [71.3, 6034.0], [71.4, 6038.0], [71.5, 6041.0], [71.6, 6044.0], [71.7, 6046.0], [71.8, 6050.0], [71.9, 6053.0], [72.0, 6056.0], [72.1, 6060.0], [72.2, 6062.0], [72.3, 6066.0], [72.4, 6068.0], [72.5, 6070.0], [72.6, 6074.0], [72.7, 6077.0], [72.8, 6079.0], [72.9, 6081.0], [73.0, 6084.0], [73.1, 6089.0], [73.2, 6091.0], [73.3, 6093.0], [73.4, 6096.0], [73.5, 6097.0], [73.6, 6100.0], [73.7, 6103.0], [73.8, 6107.0], [73.9, 6110.0], [74.0, 6112.0], [74.1, 6114.0], [74.2, 6117.0], [74.3, 6120.0], [74.4, 6123.0], [74.5, 6125.0], [74.6, 6129.0], [74.7, 6132.0], [74.8, 6135.0], [74.9, 6138.0], [75.0, 6141.0], [75.1, 6143.0], [75.2, 6147.0], [75.3, 6150.0], [75.4, 6153.0], [75.5, 6156.0], [75.6, 6159.0], [75.7, 6162.0], [75.8, 6165.0], [75.9, 6167.0], [76.0, 6170.0], [76.1, 6173.0], [76.2, 6176.0], [76.3, 6179.0], [76.4, 6181.0], [76.5, 6183.0], [76.6, 6187.0], [76.7, 6190.0], [76.8, 6191.0], [76.9, 6194.0], [77.0, 6196.0], [77.1, 6200.0], [77.2, 6203.0], [77.3, 6205.0], [77.4, 6209.0], [77.5, 6210.0], [77.6, 6213.0], [77.7, 6216.0], [77.8, 6219.0], [77.9, 6221.0], [78.0, 6224.0], [78.1, 6227.0], [78.2, 6229.0], [78.3, 6233.0], [78.4, 6235.0], [78.5, 6239.0], [78.6, 6242.0], [78.7, 6244.0], [78.8, 6247.0], [78.9, 6250.0], [79.0, 6254.0], [79.1, 6257.0], [79.2, 6260.0], [79.3, 6263.0], [79.4, 6266.0], [79.5, 6269.0], [79.6, 6272.0], [79.7, 6277.0], [79.8, 6280.0], [79.9, 6282.0], [80.0, 6288.0], [80.1, 6290.0], [80.2, 6295.0], [80.3, 6299.0], [80.4, 6302.0], [80.5, 6306.0], [80.6, 6309.0], [80.7, 6313.0], [80.8, 6316.0], [80.9, 6321.0], [81.0, 6324.0], [81.1, 6328.0], [81.2, 6332.0], [81.3, 6337.0], [81.4, 6341.0], [81.5, 6344.0], [81.6, 6350.0], [81.7, 6355.0], [81.8, 6358.0], [81.9, 6361.0], [82.0, 6366.0], [82.1, 6371.0], [82.2, 6376.0], [82.3, 6380.0], [82.4, 6386.0], [82.5, 6390.0], [82.6, 6393.0], [82.7, 6398.0], [82.8, 6402.0], [82.9, 6405.0], [83.0, 6409.0], [83.1, 6415.0], [83.2, 6419.0], [83.3, 6421.0], [83.4, 6425.0], [83.5, 6431.0], [83.6, 6435.0], [83.7, 6440.0], [83.8, 6442.0], [83.9, 6447.0], [84.0, 6451.0], [84.1, 6455.0], [84.2, 6460.0], [84.3, 6464.0], [84.4, 6469.0], [84.5, 6472.0], [84.6, 6477.0], [84.7, 6482.0], [84.8, 6487.0], [84.9, 6493.0], [85.0, 6496.0], [85.1, 6501.0], [85.2, 6504.0], [85.3, 6508.0], [85.4, 6514.0], [85.5, 6519.0], [85.6, 6521.0], [85.7, 6527.0], [85.8, 6534.0], [85.9, 6540.0], [86.0, 6546.0], [86.1, 6553.0], [86.2, 6562.0], [86.3, 6566.0], [86.4, 6571.0], [86.5, 6576.0], [86.6, 6581.0], [86.7, 6587.0], [86.8, 6591.0], [86.9, 6596.0], [87.0, 6600.0], [87.1, 6605.0], [87.2, 6609.0], [87.3, 6615.0], [87.4, 6620.0], [87.5, 6623.0], [87.6, 6628.0], [87.7, 6632.0], [87.8, 6636.0], [87.9, 6640.0], [88.0, 6645.0], [88.1, 6651.0], [88.2, 6656.0], [88.3, 6662.0], [88.4, 6668.0], [88.5, 6674.0], [88.6, 6681.0], [88.7, 6687.0], [88.8, 6694.0], [88.9, 6701.0], [89.0, 6706.0], [89.1, 6714.0], [89.2, 6721.0], [89.3, 6728.0], [89.4, 6739.0], [89.5, 6746.0], [89.6, 6754.0], [89.7, 6761.0], [89.8, 6767.0], [89.9, 6775.0], [90.0, 6784.0], [90.1, 6791.0], [90.2, 6800.0], [90.3, 6808.0], [90.4, 6818.0], [90.5, 6824.0], [90.6, 6832.0], [90.7, 6841.0], [90.8, 6849.0], [90.9, 6858.0], [91.0, 6866.0], [91.1, 6877.0], [91.2, 6889.0], [91.3, 6901.0], [91.4, 6911.0], [91.5, 6920.0], [91.6, 6932.0], [91.7, 6942.0], [91.8, 6953.0], [91.9, 6967.0], [92.0, 6986.0], [92.1, 7003.0], [92.2, 7028.0], [92.3, 7042.0], [92.4, 7056.0], [92.5, 7080.0], [92.6, 7091.0], [92.7, 7106.0], [92.8, 7122.0], [92.9, 7143.0], [93.0, 7157.0], [93.1, 7167.0], [93.2, 7181.0], [93.3, 7199.0], [93.4, 7213.0], [93.5, 7228.0], [93.6, 7243.0], [93.7, 7262.0], [93.8, 7280.0], [93.9, 7300.0], [94.0, 7314.0], [94.1, 7331.0], [94.2, 7353.0], [94.3, 7376.0], [94.4, 7396.0], [94.5, 7421.0], [94.6, 7443.0], [94.7, 7458.0], [94.8, 7485.0], [94.9, 7508.0], [95.0, 7534.0], [95.1, 7565.0], [95.2, 7585.0], [95.3, 7610.0], [95.4, 7633.0], [95.5, 7677.0], [95.6, 7709.0], [95.7, 7742.0], [95.8, 7768.0], [95.9, 7803.0], [96.0, 7843.0], [96.1, 7885.0], [96.2, 7938.0], [96.3, 7976.0], [96.4, 8011.0], [96.5, 8059.0], [96.6, 8110.0], [96.7, 8137.0], [96.8, 8170.0], [96.9, 8220.0], [97.0, 8288.0], [97.1, 8329.0], [97.2, 8400.0], [97.3, 8452.0], [97.4, 8523.0], [97.5, 8584.0], [97.6, 8675.0], [97.7, 8751.0], [97.8, 8808.0], [97.9, 8867.0], [98.0, 8945.0], [98.1, 9018.0], [98.2, 9141.0], [98.3, 9246.0], [98.4, 9370.0], [98.5, 9480.0], [98.6, 9608.0], [98.7, 9718.0], [98.8, 9805.0], [98.9, 9866.0], [99.0, 9945.0], [99.1, 10056.0], [99.2, 10142.0], [99.3, 10258.0], [99.4, 10368.0], [99.5, 10461.0], [99.6, 10747.0], [99.7, 11219.0], [99.8, 11893.0], [99.9, 13157.0], [100.0, 16310.0]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 1563.0, "series": [{"data": [[200.0, 39.0], [300.0, 35.0], [400.0, 30.0], [500.0, 29.0], [600.0, 21.0], [700.0, 21.0], [800.0, 15.0], [900.0, 7.0], [1000.0, 18.0], [1100.0, 11.0], [1200.0, 16.0], [1300.0, 17.0], [1400.0, 21.0], [1500.0, 23.0], [1600.0, 20.0], [1700.0, 14.0], [1800.0, 20.0], [1900.0, 11.0], [2000.0, 16.0], [2100.0, 14.0], [2300.0, 15.0], [2200.0, 15.0], [2400.0, 17.0], [2500.0, 17.0], [2600.0, 14.0], [2800.0, 15.0], [2700.0, 18.0], [2900.0, 17.0], [3000.0, 11.0], [3100.0, 21.0], [3300.0, 26.0], [3200.0, 15.0], [3400.0, 21.0], [3500.0, 20.0], [3600.0, 24.0], [3700.0, 22.0], [3800.0, 27.0], [3900.0, 38.0], [4000.0, 33.0], [4200.0, 64.0], [4100.0, 49.0], [4300.0, 85.0], [4500.0, 126.0], [4600.0, 149.0], [4400.0, 98.0], [4700.0, 228.0], [4800.0, 211.0], [5100.0, 497.0], [4900.0, 268.0], [5000.0, 345.0], [5300.0, 1167.0], [5200.0, 789.0], [5400.0, 1537.0], [5600.0, 1395.0], [5500.0, 1563.0], [5700.0, 1122.0], [5800.0, 922.0], [6100.0, 610.0], [5900.0, 786.0], [6000.0, 641.0], [6200.0, 566.0], [6300.0, 420.0], [6500.0, 331.0], [6400.0, 410.0], [6600.0, 332.0], [6900.0, 140.0], [6800.0, 190.0], [6700.0, 228.0], [7000.0, 95.0], [7100.0, 117.0], [7400.0, 80.0], [7300.0, 90.0], [7200.0, 103.0], [7500.0, 69.0], [7600.0, 51.0], [7800.0, 39.0], [7700.0, 60.0], [7900.0, 43.0], [8100.0, 49.0], [8000.0, 38.0], [8600.0, 21.0], [8200.0, 33.0], [8300.0, 24.0], [8400.0, 30.0], [8500.0, 26.0], [8700.0, 25.0], [8800.0, 26.0], [8900.0, 26.0], [9000.0, 14.0], [9200.0, 16.0], [9100.0, 16.0], [9400.0, 16.0], [9300.0, 14.0], [9500.0, 13.0], [9700.0, 19.0], [9600.0, 17.0], [9800.0, 27.0], [10000.0, 19.0], [9900.0, 16.0], [10100.0, 14.0], [10200.0, 17.0], [10400.0, 16.0], [10300.0, 17.0], [10600.0, 7.0], [10700.0, 5.0], [10500.0, 7.0], [10900.0, 3.0], [10800.0, 4.0], [11200.0, 3.0], [11100.0, 4.0], [11000.0, 1.0], [11400.0, 4.0], [11700.0, 3.0], [11300.0, 2.0], [11500.0, 4.0], [12000.0, 1.0], [12200.0, 1.0], [11900.0, 1.0], [11800.0, 4.0], [12100.0, 1.0], [12600.0, 2.0], [12400.0, 2.0], [12300.0, 3.0], [12500.0, 1.0], [13300.0, 2.0], [12900.0, 1.0], [13100.0, 3.0], [13000.0, 1.0], [13200.0, 1.0], [13600.0, 1.0], [13800.0, 2.0], [14100.0, 2.0], [14000.0, 1.0], [13900.0, 1.0], [14600.0, 1.0], [14400.0, 2.0], [15000.0, 1.0], [16300.0, 1.0], [15900.0, 1.0]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[200.0, 39.0], [300.0, 35.0], [400.0, 30.0], [500.0, 29.0], [600.0, 21.0], [700.0, 21.0], [800.0, 15.0], [900.0, 7.0], [1000.0, 18.0], [1100.0, 11.0], [1200.0, 16.0], [1300.0, 17.0], [1400.0, 21.0], [1500.0, 23.0], [1600.0, 20.0], [1700.0, 14.0], [1800.0, 20.0], [1900.0, 11.0], [2000.0, 16.0], [2100.0, 14.0], [2300.0, 15.0], [2200.0, 15.0], [2400.0, 17.0], [2500.0, 17.0], [2600.0, 14.0], [2800.0, 15.0], [2700.0, 18.0], [2900.0, 17.0], [3000.0, 11.0], [3100.0, 21.0], [3300.0, 26.0], [3200.0, 15.0], [3400.0, 21.0], [3500.0, 20.0], [3600.0, 24.0], [3700.0, 22.0], [3800.0, 27.0], [3900.0, 38.0], [4000.0, 33.0], [4200.0, 64.0], [4100.0, 49.0], [4300.0, 85.0], [4500.0, 126.0], [4600.0, 149.0], [4400.0, 98.0], [4700.0, 228.0], [4800.0, 211.0], [5100.0, 497.0], [4900.0, 268.0], [5000.0, 345.0], [5300.0, 1167.0], [5200.0, 789.0], [5400.0, 1537.0], [5600.0, 1395.0], [5500.0, 1563.0], [5700.0, 1122.0], [5800.0, 922.0], [6100.0, 610.0], [5900.0, 786.0], [6000.0, 641.0], [6200.0, 566.0], [6300.0, 420.0], [6500.0, 331.0], [6400.0, 410.0], [6600.0, 332.0], [6900.0, 140.0], [6800.0, 190.0], [6700.0, 228.0], [7000.0, 95.0], [7100.0, 117.0], [7400.0, 80.0], [7300.0, 90.0], [7200.0, 103.0], [7500.0, 69.0], [7600.0, 51.0], [7800.0, 39.0], [7700.0, 60.0], [7900.0, 43.0], [8100.0, 49.0], [8000.0, 38.0], [8600.0, 21.0], [8200.0, 33.0], [8300.0, 24.0], [8400.0, 30.0], [8500.0, 26.0], [8700.0, 25.0], [8800.0, 26.0], [8900.0, 26.0], [9000.0, 14.0], [9200.0, 16.0], [9100.0, 16.0], [9400.0, 16.0], [9300.0, 14.0], [9500.0, 13.0], [9700.0, 19.0], [9600.0, 17.0], [9800.0, 27.0], [10000.0, 19.0], [9900.0, 16.0], [10100.0, 14.0], [10200.0, 17.0], [10400.0, 16.0], [10300.0, 17.0], [10600.0, 7.0], [10700.0, 5.0], [10500.0, 7.0], [10900.0, 3.0], [10800.0, 4.0], [11200.0, 3.0], [11100.0, 4.0], [11000.0, 1.0], [11400.0, 4.0], [11700.0, 3.0], [11300.0, 2.0], [11500.0, 4.0], [12000.0, 1.0], [12200.0, 1.0], [11900.0, 1.0], [11800.0, 4.0], [12100.0, 1.0], [12600.0, 2.0], [12400.0, 2.0], [12300.0, 3.0], [12500.0, 1.0], [13300.0, 2.0], [12900.0, 1.0], [13100.0, 3.0], [13000.0, 1.0], [13200.0, 1.0], [13600.0, 1.0], [13800.0, 2.0], [14100.0, 2.0], [14000.0, 1.0], [13900.0, 1.0], [14600.0, 1.0], [14400.0, 2.0], [15000.0, 1.0], [16300.0, 1.0], [15900.0, 1.0]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 104.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 17153.0, "series": [{"data": [[0.0, 104.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 176.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 17153.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 34.9937254901961, "minX": 1.7524923E12, "maxY": 100.0, "series": [{"data": [[1.75249266E12, 100.0], [1.75249296E12, 100.0], [1.75249302E12, 100.0], [1.75249332E12, 100.0], [1.75249236E12, 94.64275534441806], [1.75249242E12, 100.0], [1.75249272E12, 100.0], [1.75249278E12, 100.0], [1.75249308E12, 100.0], [1.75249314E12, 100.0], [1.75249248E12, 100.0], [1.75249254E12, 100.0], [1.75249284E12, 100.0], [1.7524929E12, 100.0], [1.7524932E12, 100.0], [1.75249326E12, 100.0], [1.7524923E12, 34.9937254901961], [1.7524926E12, 100.0]], "isOverall": false, "label": "1_Lasttest_Homepage_100Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75249332E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 241.44444444444446, "minX": 2.0, "maxY": 5914.194714459291, "series": [{"data": [[2.0, 421.3333333333333], [3.0, 289.6666666666667], [4.0, 264.0], [5.0, 241.44444444444446], [6.0, 252.77777777777777], [7.0, 317.1111111111111], [8.0, 299.72727272727263], [9.0, 368.27272727272725], [10.0, 389.5454545454545], [11.0, 447.3], [12.0, 566.7], [13.0, 554.0833333333333], [14.0, 504.90909090909093], [15.0, 633.5833333333334], [16.0, 855.6999999999999], [17.0, 749.4444444444445], [18.0, 867.3846153846154], [19.0, 726.3000000000001], [20.0, 889.5454545454545], [21.0, 1003.4999999999999], [22.0, 948.3], [23.0, 1162.5555555555557], [24.0, 1416.5454545454545], [25.0, 1367.4444444444443], [26.0, 1251.4545454545455], [27.0, 961.7142857142858], [28.0, 1916.6000000000001], [29.0, 1808.1818181818182], [30.0, 1603.3000000000002], [31.0, 1721.909090909091], [32.0, 1460.111111111111], [33.0, 1511.9000000000003], [34.0, 1644.5], [35.0, 1840.0], [36.0, 2347.4166666666665], [37.0, 1724.3000000000002], [38.0, 1628.5384615384614], [39.0, 1762.75], [40.0, 2340.0], [41.0, 2515.1999999999994], [42.0, 2625.6000000000004], [43.0, 2051.1428571428573], [44.0, 2540.222222222222], [45.0, 2336.6666666666665], [46.0, 2292.3333333333335], [47.0, 2390.3333333333335], [48.0, 2602.2500000000005], [49.0, 2425.666666666667], [50.0, 3197.0000000000005], [51.0, 3170.8571428571427], [52.0, 3160.4], [53.0, 2706.0], [54.0, 2811.909090909091], [55.0, 3324.0909090909095], [56.0, 3165.777777777778], [57.0, 3114.8999999999996], [58.0, 2638.5714285714284], [59.0, 3461.625], [60.0, 3399.8461538461534], [61.0, 3274.6666666666665], [62.0, 3739.0], [63.0, 3068.4444444444443], [64.0, 2998.5454545454545], [65.0, 3728.666666666667], [66.0, 3385.25], [67.0, 3221.75], [68.0, 3708.0714285714284], [69.0, 3570.1111111111113], [70.0, 3709.0], [71.0, 3733.1818181818185], [72.0, 3574.416666666667], [73.0, 3617.4444444444443], [74.0, 3528.25], [75.0, 3998.090909090909], [76.0, 3756.9285714285716], [77.0, 3711.5000000000005], [78.0, 3907.454545454546], [79.0, 3834.375], [80.0, 3990.7], [81.0, 4188.2], [82.0, 3988.6923076923076], [83.0, 4045.8888888888887], [84.0, 4051.8888888888887], [85.0, 4570.818181818182], [86.0, 4858.8], [87.0, 4649.75], [88.0, 4823.333333333333], [89.0, 4618.428571428572], [90.0, 4769.5], [91.0, 5080.181818181818], [92.0, 5015.2], [93.0, 4657.5], [94.0, 4624.428571428572], [95.0, 5236.777777777777], [96.0, 5144.363636363636], [97.0, 5323.222222222223], [98.0, 5473.363636363636], [99.0, 5143.461538461539], [100.0, 5914.194714459291]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[97.2993747490392, 5735.065966844457]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)-Aggregated", "isController": true}, {"data": [[2.0, 421.3333333333333], [3.0, 289.6666666666667], [4.0, 264.0], [5.0, 241.44444444444446], [6.0, 252.77777777777777], [7.0, 317.1111111111111], [8.0, 299.72727272727263], [9.0, 368.27272727272725], [10.0, 389.5454545454545], [11.0, 447.3], [12.0, 566.7], [13.0, 554.0833333333333], [14.0, 504.90909090909093], [15.0, 633.5833333333334], [16.0, 855.6999999999999], [17.0, 749.4444444444445], [18.0, 867.3846153846154], [19.0, 726.3000000000001], [20.0, 889.5454545454545], [21.0, 1003.4999999999999], [22.0, 948.3], [23.0, 1162.5555555555557], [24.0, 1416.5454545454545], [25.0, 1367.4444444444443], [26.0, 1251.4545454545455], [27.0, 961.7142857142858], [28.0, 1916.6000000000001], [29.0, 1808.1818181818182], [30.0, 1603.3000000000002], [31.0, 1721.909090909091], [32.0, 1460.111111111111], [33.0, 1511.9000000000003], [34.0, 1644.5], [35.0, 1840.0], [36.0, 2347.4166666666665], [37.0, 1724.3000000000002], [38.0, 1628.5384615384614], [39.0, 1762.75], [40.0, 2340.0], [41.0, 2515.1999999999994], [42.0, 2625.6000000000004], [43.0, 2051.1428571428573], [44.0, 2540.222222222222], [45.0, 2336.6666666666665], [46.0, 2292.3333333333335], [47.0, 2390.3333333333335], [48.0, 2602.2500000000005], [49.0, 2425.666666666667], [50.0, 3197.0000000000005], [51.0, 3170.8571428571427], [52.0, 3160.4], [53.0, 2706.0], [54.0, 2811.909090909091], [55.0, 3324.0909090909095], [56.0, 3165.777777777778], [57.0, 3114.8999999999996], [58.0, 2638.5714285714284], [59.0, 3461.625], [60.0, 3399.8461538461534], [61.0, 3274.6666666666665], [62.0, 3739.0], [63.0, 3068.4444444444443], [64.0, 2998.5454545454545], [65.0, 3728.666666666667], [66.0, 3385.25], [67.0, 3221.75], [68.0, 3708.0714285714284], [69.0, 3570.1111111111113], [70.0, 3709.0], [71.0, 3733.1818181818185], [72.0, 3574.416666666667], [73.0, 3617.4444444444443], [74.0, 3528.25], [75.0, 3998.090909090909], [76.0, 3756.9285714285716], [77.0, 3711.5000000000005], [78.0, 3907.454545454546], [79.0, 3834.375], [80.0, 3990.7], [81.0, 4188.2], [82.0, 3988.6923076923076], [83.0, 4045.8888888888887], [84.0, 4051.8888888888887], [85.0, 4570.818181818182], [86.0, 4858.8], [87.0, 4649.75], [88.0, 4823.333333333333], [89.0, 4618.428571428572], [90.0, 4769.5], [91.0, 5080.181818181818], [92.0, 5015.2], [93.0, 4657.5], [94.0, 4624.428571428572], [95.0, 5236.777777777777], [96.0, 5144.363636363636], [97.0, 5323.222222222223], [98.0, 5473.363636363636], [99.0, 5143.461538461539], [100.0, 5914.194714459291]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}, {"data": [[97.2993747490392, 5735.065966844457]], "isOverall": false, "label": "GET / Startseite laden-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7389.2, "minX": 1.7524923E12, "maxY": 642058.8, "series": [{"data": [[1.75249266E12, 593993.4], [1.75249296E12, 593993.4], [1.75249302E12, 610608.6], [1.75249332E12, 465819.0], [1.75249236E12, 624256.8], [1.75249242E12, 535840.2], [1.75249272E12, 592806.6], [1.75249278E12, 582718.8], [1.75249308E12, 612388.8], [1.75249314E12, 642058.8], [1.75249248E12, 575004.6], [1.75249254E12, 586279.2], [1.75249284E12, 600520.8], [1.7524929E12, 578565.0], [1.7524932E12, 614169.0], [1.75249326E12, 605861.4], [1.7524923E12, 123167.8], [1.7524926E12, 551862.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75249266E12, 11611.6], [1.75249296E12, 11611.6], [1.75249302E12, 11936.4], [1.75249332E12, 9106.0], [1.75249236E12, 12203.2], [1.75249242E12, 10474.8], [1.75249272E12, 11588.4], [1.75249278E12, 11391.2], [1.75249308E12, 11971.2], [1.75249314E12, 12551.2], [1.75249248E12, 11240.4], [1.75249254E12, 11460.8], [1.75249284E12, 11739.2], [1.7524929E12, 11310.0], [1.7524932E12, 12006.0], [1.75249326E12, 11843.6], [1.7524923E12, 7389.2], [1.7524926E12, 10788.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75249332E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1851.4646781789634, "minX": 1.7524923E12, "maxY": 6494.110864745004, "series": [{"data": [[1.75249266E12, 5900.483483483481], [1.75249296E12, 5979.545363908272], [1.75249302E12, 5689.998052580332], [1.75249332E12, 6378.947637292462], [1.75249236E12, 5163.928774928776], [1.75249242E12, 6494.110864745004], [1.75249272E12, 5944.50350350351], [1.75249278E12, 5971.504065040644], [1.75249308E12, 5741.074540174253], [1.75249314E12, 5453.00185013876], [1.75249248E12, 6073.66804123711], [1.75249254E12, 5974.4787449392725], [1.75249284E12, 5852.69970267592], [1.7524929E12, 5958.704615384617], [1.7524932E12, 5696.014506769829], [1.75249326E12, 5730.561094819161], [1.7524923E12, 1853.2821316614416], [1.7524926E12, 6298.44849785408]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[1.75249266E12, 5905.692307692306], [1.75249296E12, 5981.714285714288], [1.75249302E12, 5689.3236151603505], [1.75249332E12, 6377.917197452232], [1.75249236E12, 5161.674904942968], [1.75249242E12, 6491.688815060903], [1.75249272E12, 5946.194194194192], [1.75249278E12, 5964.342158859469], [1.75249308E12, 5741.867248062019], [1.75249314E12, 5453.396487985212], [1.75249248E12, 6073.746130030954], [1.75249254E12, 5976.751012145743], [1.75249284E12, 5857.643280632404], [1.7524929E12, 5956.64102564103], [1.7524932E12, 5695.893719806763], [1.75249326E12, 5730.083251714007], [1.7524923E12, 1851.4646781789634], [1.7524926E12, 6292.94946236559]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75249332E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7524923E12, "maxY": 6486.235880398672, "series": [{"data": [[1.75249266E12, 0.0], [1.75249296E12, 0.0], [1.75249302E12, 0.0], [1.75249332E12, 0.0], [1.75249236E12, 0.0], [1.75249242E12, 0.0], [1.75249272E12, 0.0], [1.75249278E12, 0.0], [1.75249308E12, 0.0], [1.75249314E12, 0.0], [1.75249248E12, 0.0], [1.75249254E12, 0.0], [1.75249284E12, 0.0], [1.7524929E12, 0.0], [1.7524932E12, 0.0], [1.75249326E12, 0.0], [1.7524923E12, 0.0], [1.7524926E12, 0.0]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[1.75249266E12, 5900.206793206795], [1.75249296E12, 5976.045954045953], [1.75249302E12, 5684.141885325556], [1.75249332E12, 6372.436942675159], [1.75249236E12, 5156.49429657795], [1.75249242E12, 6486.235880398672], [1.75249272E12, 5940.780780780794], [1.75249278E12, 5958.732179226071], [1.75249308E12, 5736.474806201554], [1.75249314E12, 5448.231977818857], [1.75249248E12, 6068.382868937045], [1.75249254E12, 5971.541497975707], [1.75249284E12, 5852.099802371537], [1.7524929E12, 5951.143589743589], [1.7524932E12, 5690.537198067628], [1.75249326E12, 5724.965719882465], [1.7524923E12, 1849.5353218210369], [1.7524926E12, 6286.92150537635]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75249332E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10.27445394112062, "minX": 1.7524923E12, "maxY": 13.302150537634411, "series": [{"data": [[1.75249266E12, 11.595595595595588], [1.75249296E12, 12.123629112662016], [1.75249302E12, 10.547224926971753], [1.75249332E12, 10.787994891443155], [1.75249236E12, 10.27445394112062], [1.75249242E12, 11.76829268292684], [1.75249272E12, 11.368368368368376], [1.75249278E12, 11.825203252032516], [1.75249308E12, 10.89738625363019], [1.75249314E12, 10.358001850138768], [1.75249248E12, 11.197938144329905], [1.75249254E12, 10.678137651821865], [1.75249284E12, 11.746283448959364], [1.7524929E12, 11.355897435897429], [1.7524932E12, 11.193423597678919], [1.75249326E12, 10.41251221896382], [1.7524923E12, 11.951410658307205], [1.7524926E12, 13.273605150214584]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[1.75249266E12, 11.572427572427559], [1.75249296E12, 12.258741258741242], [1.75249302E12, 10.52672497570455], [1.75249332E12, 10.760509554140116], [1.75249236E12, 10.284220532319402], [1.75249242E12, 11.75526024363235], [1.75249272E12, 11.368368368368378], [1.75249278E12, 11.849287169042766], [1.75249308E12, 10.907945736434103], [1.75249314E12, 10.348428835489827], [1.75249248E12, 11.209494324045409], [1.75249254E12, 10.67813765182187], [1.75249284E12, 11.711462450592878], [1.7524929E12, 11.24205128205127], [1.7524932E12, 11.182608695652172], [1.75249326E12, 10.432908912830548], [1.7524923E12, 11.970172684458394], [1.7524926E12, 13.302150537634411]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75249332E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 213.0, "minX": 1.7524923E12, "maxY": 16310.0, "series": [{"data": [[1.75249266E12, 15048.0], [1.75249296E12, 7625.0], [1.75249302E12, 6649.0], [1.75249332E12, 7501.0], [1.75249236E12, 9452.0], [1.75249242E12, 10482.0], [1.75249272E12, 16310.0], [1.75249278E12, 13157.0], [1.75249308E12, 7564.0], [1.75249314E12, 6622.0], [1.75249248E12, 7066.0], [1.75249254E12, 10906.0], [1.75249284E12, 15993.0], [1.7524929E12, 8035.0], [1.7524932E12, 7664.0], [1.75249326E12, 6732.0], [1.7524923E12, 6509.0], [1.7524926E12, 14111.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75249266E12, 4134.0], [1.75249296E12, 5198.0], [1.75249302E12, 5163.0], [1.75249332E12, 5798.0], [1.75249236E12, 2803.0], [1.75249242E12, 4886.0], [1.75249272E12, 3855.0], [1.75249278E12, 4116.0], [1.75249308E12, 5149.0], [1.75249314E12, 4995.0], [1.75249248E12, 5238.0], [1.75249254E12, 4438.0], [1.75249284E12, 4382.0], [1.7524929E12, 5157.0], [1.7524932E12, 5055.0], [1.75249326E12, 5045.0], [1.7524923E12, 213.0], [1.7524926E12, 3908.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75249266E12, 7585.0], [1.75249296E12, 6729.8], [1.75249302E12, 5952.0], [1.75249332E12, 6948.8], [1.75249236E12, 6058.400000000001], [1.75249242E12, 9654.6], [1.75249272E12, 8074.0], [1.75249278E12, 7822.600000000001], [1.75249308E12, 6276.8], [1.75249314E12, 5736.0], [1.75249248E12, 6684.0], [1.75249254E12, 6824.4], [1.75249284E12, 6970.1], [1.7524929E12, 6593.2], [1.7524932E12, 6081.2], [1.75249326E12, 6287.200000000001], [1.7524923E12, 3463.000000000001], [1.7524926E12, 8362.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75249266E12, 11558.920000000002], [1.75249296E12, 7529.9400000000005], [1.75249302E12, 6367.200000000001], [1.75249332E12, 7458.14], [1.75249236E12, 7431.390000000001], [1.75249242E12, 10416.880000000001], [1.75249272E12, 12361.0], [1.75249278E12, 10842.919999999996], [1.75249308E12, 6788.68], [1.75249314E12, 6249.060000000001], [1.75249248E12, 6947.0], [1.75249254E12, 9235.810000000003], [1.75249284E12, 9065.550000000001], [1.7524929E12, 7197.2], [1.7524932E12, 6571.64], [1.75249326E12, 6631.9], [1.7524923E12, 5325.16], [1.7524926E12, 12006.619999999994]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75249266E12, 5426.0], [1.75249296E12, 5791.0], [1.75249302E12, 5670.0], [1.75249332E12, 6269.0], [1.75249236E12, 5299.0], [1.75249242E12, 5608.0], [1.75249272E12, 5417.0], [1.75249278E12, 5562.5], [1.75249308E12, 5646.0], [1.75249314E12, 5427.0], [1.75249248E12, 6087.0], [1.75249254E12, 5828.0], [1.75249284E12, 5578.0], [1.7524929E12, 5878.0], [1.7524932E12, 5659.0], [1.75249326E12, 5684.0], [1.7524923E12, 1680.0], [1.7524926E12, 5771.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75249266E12, 8887.8], [1.75249296E12, 7272.7], [1.75249302E12, 6197.0], [1.75249332E12, 7152.699999999999], [1.75249236E12, 6408.949999999999], [1.75249242E12, 10053.599999999999], [1.75249272E12, 9370.0], [1.75249278E12, 8573.25], [1.75249308E12, 6526.7], [1.75249314E12, 5883.85], [1.75249248E12, 6805.5], [1.75249254E12, 7360.699999999999], [1.75249284E12, 7762.75], [1.7524929E12, 6741.4], [1.7524932E12, 6218.0], [1.75249326E12, 6476.9], [1.7524923E12, 4025.0000000000005], [1.7524926E12, 9344.05]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75249332E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 316.5, "minX": 4.0, "maxY": 9456.0, "series": [{"data": [[8.0, 8062.5], [9.0, 6076.0], [10.0, 5908.5], [11.0, 6292.5], [12.0, 6202.0], [13.0, 6113.0], [14.0, 5893.5], [15.0, 5803.0], [4.0, 316.5], [16.0, 5681.5], [17.0, 5625.5], [18.0, 5609.5], [19.0, 5577.0], [20.0, 5549.0], [21.0, 5531.0], [22.0, 5572.5], [23.0, 5594.0], [6.0, 9456.0], [24.0, 5587.5], [26.0, 5642.5], [7.0, 8058.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 314.0, "minX": 4.0, "maxY": 9454.0, "series": [{"data": [[8.0, 8045.5], [9.0, 6073.0], [10.0, 5903.0], [11.0, 6290.5], [12.0, 6198.0], [13.0, 6098.0], [14.0, 5885.5], [15.0, 5798.0], [4.0, 314.0], [16.0, 5675.0], [17.0, 5621.0], [18.0, 5604.5], [19.0, 5569.0], [20.0, 5541.5], [21.0, 5526.0], [22.0, 5552.5], [23.0, 5589.0], [6.0, 9454.0], [24.0, 5585.0], [26.0, 5640.0], [7.0, 8056.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.466666666666667, "minX": 1.7524923E12, "maxY": 18.066666666666666, "series": [{"data": [[1.75249266E12, 16.65], [1.75249296E12, 16.683333333333334], [1.75249302E12, 17.15], [1.75249332E12, 11.466666666666667], [1.75249236E12, 18.066666666666666], [1.75249242E12, 15.033333333333333], [1.75249272E12, 16.65], [1.75249278E12, 16.383333333333333], [1.75249308E12, 17.166666666666668], [1.75249314E12, 18.066666666666666], [1.75249248E12, 16.166666666666668], [1.75249254E12, 16.5], [1.75249284E12, 16.866666666666667], [1.7524929E12, 16.25], [1.7524932E12, 17.216666666666665], [1.75249326E12, 17.016666666666666], [1.7524923E12, 11.716666666666667], [1.7524926E12, 15.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75249332E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.616666666666667, "minX": 1.7524923E12, "maxY": 18.033333333333335, "series": [{"data": [[1.75249266E12, 16.683333333333334], [1.75249296E12, 16.683333333333334], [1.75249302E12, 17.15], [1.75249332E12, 13.083333333333334], [1.75249236E12, 17.533333333333335], [1.75249242E12, 15.05], [1.75249272E12, 16.65], [1.75249278E12, 16.366666666666667], [1.75249308E12, 17.2], [1.75249314E12, 18.033333333333335], [1.75249248E12, 16.15], [1.75249254E12, 16.466666666666665], [1.75249284E12, 16.866666666666667], [1.7524929E12, 16.25], [1.7524932E12, 17.25], [1.75249326E12, 17.016666666666666], [1.7524923E12, 10.616666666666667], [1.7524926E12, 15.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75249332E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.616666666666667, "minX": 1.7524923E12, "maxY": 18.033333333333335, "series": [{"data": [[1.75249266E12, 16.683333333333334], [1.75249296E12, 16.683333333333334], [1.75249302E12, 17.15], [1.75249332E12, 13.083333333333334], [1.75249236E12, 17.533333333333335], [1.75249242E12, 15.05], [1.75249272E12, 16.65], [1.75249278E12, 16.366666666666667], [1.75249308E12, 17.2], [1.75249314E12, 18.033333333333335], [1.75249248E12, 16.15], [1.75249254E12, 16.466666666666665], [1.75249284E12, 16.866666666666667], [1.7524929E12, 16.25], [1.7524932E12, 17.25], [1.75249326E12, 17.016666666666666], [1.7524923E12, 10.616666666666667], [1.7524926E12, 15.5]], "isOverall": false, "label": "GET / Startseite laden-success", "isController": false}, {"data": [[1.75249266E12, 16.65], [1.75249296E12, 16.716666666666665], [1.75249302E12, 17.116666666666667], [1.75249332E12, 13.05], [1.75249236E12, 17.55], [1.75249242E12, 15.033333333333333], [1.75249272E12, 16.65], [1.75249278E12, 16.4], [1.75249308E12, 17.216666666666665], [1.75249314E12, 18.016666666666666], [1.75249248E12, 16.166666666666668], [1.75249254E12, 16.466666666666665], [1.75249284E12, 16.816666666666666], [1.7524929E12, 16.25], [1.7524932E12, 17.233333333333334], [1.75249326E12, 17.05], [1.7524923E12, 10.633333333333333], [1.7524926E12, 15.533333333333333]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)-success", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75249332E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 21.25, "minX": 1.7524923E12, "maxY": 36.05, "series": [{"data": [[1.75249266E12, 33.333333333333336], [1.75249296E12, 33.4], [1.75249302E12, 34.266666666666666], [1.75249332E12, 26.133333333333333], [1.75249236E12, 35.083333333333336], [1.75249242E12, 30.083333333333332], [1.75249272E12, 33.3], [1.75249278E12, 32.766666666666666], [1.75249308E12, 34.416666666666664], [1.75249314E12, 36.05], [1.75249248E12, 32.31666666666667], [1.75249254E12, 32.93333333333333], [1.75249284E12, 33.68333333333333], [1.7524929E12, 32.5], [1.7524932E12, 34.483333333333334], [1.75249326E12, 34.06666666666667], [1.7524923E12, 21.25], [1.7524926E12, 31.033333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75249332E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

