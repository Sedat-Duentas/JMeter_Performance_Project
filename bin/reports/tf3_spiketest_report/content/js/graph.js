/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 22275.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 777.0], [0.8, 777.0], [0.9, 807.0], [1.0, 821.0], [1.1, 821.0], [1.2, 830.0], [1.3, 830.0], [1.4, 842.0], [1.5, 922.0], [1.6, 922.0], [1.7, 963.0], [1.8, 963.0], [1.9, 973.0], [2.0, 1024.0], [2.1, 1024.0], [2.2, 1031.0], [2.3, 1031.0], [2.4, 1101.0], [2.5, 1164.0], [2.6, 1164.0], [2.7, 1222.0], [2.8, 1273.0], [2.9, 1273.0], [3.0, 1288.0], [3.1, 1288.0], [3.2, 1293.0], [3.3, 1302.0], [3.4, 1302.0], [3.5, 1376.0], [3.6, 1376.0], [3.7, 1394.0], [3.8, 1414.0], [3.9, 1414.0], [4.0, 1438.0], [4.1, 1438.0], [4.2, 1475.0], [4.3, 1481.0], [4.4, 1481.0], [4.5, 1485.0], [4.6, 1485.0], [4.7, 1507.0], [4.8, 1509.0], [4.9, 1509.0], [5.0, 1518.0], [5.1, 1536.0], [5.2, 1536.0], [5.3, 1540.0], [5.4, 1540.0], [5.5, 1544.0], [5.6, 1552.0], [5.7, 1552.0], [5.8, 1571.0], [5.9, 1571.0], [6.0, 1627.0], [6.1, 1634.0], [6.2, 1634.0], [6.3, 1642.0], [6.4, 1642.0], [6.5, 1650.0], [6.6, 1653.0], [6.7, 1653.0], [6.8, 1674.0], [6.9, 1674.0], [7.0, 1712.0], [7.1, 1722.0], [7.2, 1722.0], [7.3, 1730.0], [7.4, 1730.0], [7.5, 1773.0], [7.6, 1800.0], [7.7, 1800.0], [7.8, 1807.0], [7.9, 1861.0], [8.0, 1861.0], [8.1, 1884.0], [8.2, 1884.0], [8.3, 1894.0], [8.4, 1919.0], [8.5, 1919.0], [8.6, 2102.0], [8.7, 2102.0], [8.8, 2118.0], [8.9, 2146.0], [9.0, 2146.0], [9.1, 2164.0], [9.2, 2164.0], [9.3, 2176.0], [9.4, 2178.0], [9.5, 2178.0], [9.6, 2189.0], [9.7, 2189.0], [9.8, 2203.0], [9.9, 2244.0], [10.0, 2244.0], [10.1, 2312.0], [10.2, 2349.0], [10.3, 2349.0], [10.4, 2352.0], [10.5, 2352.0], [10.6, 2353.0], [10.7, 2354.0], [10.8, 2354.0], [10.9, 2360.0], [11.0, 2360.0], [11.1, 2373.0], [11.2, 2431.0], [11.3, 2431.0], [11.4, 2462.0], [11.5, 2462.0], [11.6, 2472.0], [11.7, 2501.0], [11.8, 2501.0], [11.9, 2509.0], [12.0, 2509.0], [12.1, 2534.0], [12.2, 2551.0], [12.3, 2551.0], [12.4, 2552.0], [12.5, 2559.0], [12.6, 2559.0], [12.7, 2563.0], [12.8, 2563.0], [12.9, 2579.0], [13.0, 2583.0], [13.1, 2583.0], [13.2, 2590.0], [13.3, 2590.0], [13.4, 2591.0], [13.5, 2605.0], [13.6, 2605.0], [13.7, 2638.0], [13.8, 2638.0], [13.9, 2654.0], [14.0, 2660.0], [14.1, 2660.0], [14.2, 2661.0], [14.3, 2661.0], [14.4, 2662.0], [14.5, 2666.0], [14.6, 2666.0], [14.7, 2675.0], [14.8, 2675.0], [14.9, 2685.0], [15.0, 2691.0], [15.1, 2691.0], [15.2, 2692.0], [15.3, 2695.0], [15.4, 2695.0], [15.5, 2707.0], [15.6, 2707.0], [15.7, 2741.0], [15.8, 2743.0], [15.9, 2743.0], [16.0, 2746.0], [16.1, 2746.0], [16.2, 2753.0], [16.3, 2776.0], [16.4, 2776.0], [16.5, 2776.0], [16.6, 2776.0], [16.7, 2788.0], [16.8, 2792.0], [16.9, 2792.0], [17.0, 2805.0], [17.1, 2805.0], [17.2, 2814.0], [17.3, 2814.0], [17.4, 2814.0], [17.5, 2815.0], [17.6, 2816.0], [17.7, 2816.0], [17.8, 2818.0], [17.9, 2818.0], [18.0, 2824.0], [18.1, 2825.0], [18.2, 2825.0], [18.3, 2826.0], [18.4, 2826.0], [18.5, 2834.0], [18.6, 2854.0], [18.7, 2854.0], [18.8, 2856.0], [18.9, 2856.0], [19.0, 2867.0], [19.1, 2875.0], [19.2, 2875.0], [19.3, 2875.0], [19.4, 2875.0], [19.5, 2886.0], [19.6, 2895.0], [19.7, 2895.0], [19.8, 2904.0], [19.9, 2904.0], [20.0, 2911.0], [20.1, 2912.0], [20.2, 2912.0], [20.3, 2924.0], [20.4, 2947.0], [20.5, 2947.0], [20.6, 2947.0], [20.7, 2947.0], [20.8, 2954.0], [20.9, 2954.0], [21.0, 2954.0], [21.1, 2956.0], [21.2, 2956.0], [21.3, 2956.0], [21.4, 2993.0], [21.5, 2993.0], [21.6, 2995.0], [21.7, 2995.0], [21.8, 2998.0], [21.9, 3000.0], [22.0, 3000.0], [22.1, 3006.0], [22.2, 3006.0], [22.3, 3009.0], [22.4, 3012.0], [22.5, 3012.0], [22.6, 3037.0], [22.7, 3039.0], [22.8, 3039.0], [22.9, 3055.0], [23.0, 3055.0], [23.1, 3062.0], [23.2, 3062.0], [23.3, 3062.0], [23.4, 3067.0], [23.5, 3067.0], [23.6, 3086.0], [23.7, 3092.0], [23.8, 3092.0], [23.9, 3094.0], [24.0, 3094.0], [24.1, 3095.0], [24.2, 3095.0], [24.3, 3095.0], [24.4, 3101.0], [24.5, 3101.0], [24.6, 3101.0], [24.7, 3112.0], [24.8, 3112.0], [24.9, 3149.0], [25.0, 3149.0], [25.1, 3157.0], [25.2, 3161.0], [25.3, 3161.0], [25.4, 3169.0], [25.5, 3183.0], [25.6, 3183.0], [25.7, 3191.0], [25.8, 3191.0], [25.9, 3216.0], [26.0, 3223.0], [26.1, 3223.0], [26.2, 3239.0], [26.3, 3239.0], [26.4, 3240.0], [26.5, 3248.0], [26.6, 3248.0], [26.7, 3256.0], [26.8, 3256.0], [26.9, 3258.0], [27.0, 3266.0], [27.1, 3266.0], [27.2, 3286.0], [27.3, 3286.0], [27.4, 3289.0], [27.5, 3295.0], [27.6, 3295.0], [27.7, 3313.0], [27.8, 3326.0], [27.9, 3326.0], [28.0, 3350.0], [28.1, 3350.0], [28.2, 3361.0], [28.3, 3375.0], [28.4, 3375.0], [28.5, 3388.0], [28.6, 3388.0], [28.7, 3405.0], [28.8, 3406.0], [28.9, 3406.0], [29.0, 3418.0], [29.1, 3418.0], [29.2, 3432.0], [29.3, 3434.0], [29.4, 3434.0], [29.5, 3441.0], [29.6, 3441.0], [29.7, 3445.0], [29.8, 3451.0], [29.9, 3451.0], [30.0, 3458.0], [30.1, 3459.0], [30.2, 3459.0], [30.3, 3468.0], [30.4, 3468.0], [30.5, 3471.0], [30.6, 3471.0], [30.7, 3471.0], [30.8, 3475.0], [30.9, 3475.0], [31.0, 3479.0], [31.1, 3491.0], [31.2, 3491.0], [31.3, 3493.0], [31.4, 3493.0], [31.5, 3539.0], [31.6, 3541.0], [31.7, 3541.0], [31.8, 3552.0], [31.9, 3552.0], [32.0, 3557.0], [32.1, 3583.0], [32.2, 3583.0], [32.3, 3583.0], [32.4, 3583.0], [32.5, 3584.0], [32.6, 3597.0], [32.7, 3597.0], [32.8, 3598.0], [32.9, 3610.0], [33.0, 3610.0], [33.1, 3615.0], [33.2, 3615.0], [33.3, 3625.0], [33.4, 3626.0], [33.5, 3626.0], [33.6, 3626.0], [33.7, 3626.0], [33.8, 3630.0], [33.9, 3632.0], [34.0, 3632.0], [34.1, 3632.0], [34.2, 3632.0], [34.3, 3643.0], [34.4, 3652.0], [34.5, 3652.0], [34.6, 3659.0], [34.7, 3659.0], [34.8, 3672.0], [34.9, 3684.0], [35.0, 3684.0], [35.1, 3696.0], [35.2, 3749.0], [35.3, 3749.0], [35.4, 3753.0], [35.5, 3753.0], [35.6, 3764.0], [35.7, 3766.0], [35.8, 3766.0], [35.9, 3801.0], [36.0, 3801.0], [36.1, 3831.0], [36.2, 3833.0], [36.3, 3833.0], [36.4, 3880.0], [36.5, 3880.0], [36.6, 3880.0], [36.7, 3910.0], [36.8, 3910.0], [36.9, 3912.0], [37.0, 3912.0], [37.1, 3920.0], [37.2, 3935.0], [37.3, 3935.0], [37.4, 3962.0], [37.5, 3962.0], [37.6, 3969.0], [37.7, 3985.0], [37.8, 3985.0], [37.9, 4002.0], [38.0, 4006.0], [38.1, 4006.0], [38.2, 4026.0], [38.3, 4026.0], [38.4, 4029.0], [38.5, 4036.0], [38.6, 4036.0], [38.7, 4055.0], [38.8, 4055.0], [38.9, 4077.0], [39.0, 4086.0], [39.1, 4086.0], [39.2, 4088.0], [39.3, 4088.0], [39.4, 4104.0], [39.5, 4126.0], [39.6, 4126.0], [39.7, 4126.0], [39.8, 4126.0], [39.9, 4132.0], [40.0, 4134.0], [40.1, 4134.0], [40.2, 4138.0], [40.3, 4141.0], [40.4, 4141.0], [40.5, 4146.0], [40.6, 4146.0], [40.7, 4151.0], [40.8, 4153.0], [40.9, 4153.0], [41.0, 4161.0], [41.1, 4161.0], [41.2, 4167.0], [41.3, 4176.0], [41.4, 4176.0], [41.5, 4215.0], [41.6, 4215.0], [41.7, 4220.0], [41.8, 4230.0], [41.9, 4230.0], [42.0, 4252.0], [42.1, 4252.0], [42.2, 4262.0], [42.3, 4286.0], [42.4, 4286.0], [42.5, 4290.0], [42.6, 4293.0], [42.7, 4293.0], [42.8, 4297.0], [42.9, 4297.0], [43.0, 4303.0], [43.1, 4303.0], [43.2, 4303.0], [43.3, 4312.0], [43.4, 4312.0], [43.5, 4318.0], [43.6, 4323.0], [43.7, 4323.0], [43.8, 4325.0], [43.9, 4325.0], [44.0, 4333.0], [44.1, 4348.0], [44.2, 4348.0], [44.3, 4348.0], [44.4, 4348.0], [44.5, 4349.0], [44.6, 4350.0], [44.7, 4350.0], [44.8, 4351.0], [44.9, 4351.0], [45.0, 4371.0], [45.1, 4383.0], [45.2, 4383.0], [45.3, 4385.0], [45.4, 4387.0], [45.5, 4387.0], [45.6, 4410.0], [45.7, 4410.0], [45.8, 4414.0], [45.9, 4424.0], [46.0, 4424.0], [46.1, 4426.0], [46.2, 4426.0], [46.3, 4426.0], [46.4, 4436.0], [46.5, 4436.0], [46.6, 4467.0], [46.7, 4467.0], [46.8, 4481.0], [46.9, 4513.0], [47.0, 4513.0], [47.1, 4523.0], [47.2, 4523.0], [47.3, 4524.0], [47.4, 4524.0], [47.5, 4524.0], [47.6, 4562.0], [47.7, 4575.0], [47.8, 4575.0], [47.9, 4579.0], [48.0, 4579.0], [48.1, 4584.0], [48.2, 4597.0], [48.3, 4597.0], [48.4, 4612.0], [48.5, 4612.0], [48.6, 4619.0], [48.7, 4627.0], [48.8, 4627.0], [48.9, 4629.0], [49.0, 4629.0], [49.1, 4634.0], [49.2, 4638.0], [49.3, 4638.0], [49.4, 4647.0], [49.5, 4647.0], [49.6, 4658.0], [49.7, 4679.0], [49.8, 4679.0], [49.9, 4709.0], [50.0, 4709.0], [50.1, 4725.0], [50.2, 4736.0], [50.3, 4736.0], [50.4, 4742.0], [50.5, 4751.0], [50.6, 4751.0], [50.7, 4754.0], [50.8, 4754.0], [50.9, 4757.0], [51.0, 4760.0], [51.1, 4760.0], [51.2, 4789.0], [51.3, 4789.0], [51.4, 4789.0], [51.5, 4804.0], [51.6, 4804.0], [51.7, 4821.0], [51.8, 4821.0], [51.9, 4834.0], [52.0, 4852.0], [52.1, 4852.0], [52.2, 4878.0], [52.3, 4878.0], [52.4, 4889.0], [52.5, 4891.0], [52.6, 4891.0], [52.7, 4898.0], [52.8, 4919.0], [52.9, 4919.0], [53.0, 4919.0], [53.1, 4919.0], [53.2, 4962.0], [53.3, 4964.0], [53.4, 4964.0], [53.5, 5007.0], [53.6, 5007.0], [53.7, 5030.0], [53.8, 5067.0], [53.9, 5067.0], [54.0, 5068.0], [54.1, 5068.0], [54.2, 5080.0], [54.3, 5108.0], [54.4, 5108.0], [54.5, 5109.0], [54.6, 5109.0], [54.7, 5113.0], [54.8, 5129.0], [54.9, 5129.0], [55.0, 5131.0], [55.1, 5138.0], [55.2, 5138.0], [55.3, 5146.0], [55.4, 5146.0], [55.5, 5203.0], [55.6, 5206.0], [55.7, 5206.0], [55.8, 5256.0], [55.9, 5256.0], [56.0, 5282.0], [56.1, 5295.0], [56.2, 5295.0], [56.3, 5309.0], [56.4, 5309.0], [56.5, 5310.0], [56.6, 5322.0], [56.7, 5322.0], [56.8, 5331.0], [56.9, 5331.0], [57.0, 5336.0], [57.1, 5347.0], [57.2, 5347.0], [57.3, 5354.0], [57.4, 5354.0], [57.5, 5355.0], [57.6, 5391.0], [57.7, 5391.0], [57.8, 5391.0], [57.9, 5416.0], [58.0, 5416.0], [58.1, 5422.0], [58.2, 5422.0], [58.3, 5422.0], [58.4, 5433.0], [58.5, 5433.0], [58.6, 5463.0], [58.7, 5463.0], [58.8, 5501.0], [58.9, 5504.0], [59.0, 5504.0], [59.1, 5509.0], [59.2, 5509.0], [59.3, 5511.0], [59.4, 5512.0], [59.5, 5512.0], [59.6, 5519.0], [59.7, 5519.0], [59.8, 5532.0], [59.9, 5540.0], [60.0, 5540.0], [60.1, 5618.0], [60.2, 5623.0], [60.3, 5623.0], [60.4, 5635.0], [60.5, 5635.0], [60.6, 5659.0], [60.7, 5661.0], [60.8, 5661.0], [60.9, 5662.0], [61.0, 5662.0], [61.1, 5666.0], [61.2, 5691.0], [61.3, 5691.0], [61.4, 5732.0], [61.5, 5732.0], [61.6, 5735.0], [61.7, 5745.0], [61.8, 5745.0], [61.9, 5746.0], [62.0, 5746.0], [62.1, 5768.0], [62.2, 5792.0], [62.3, 5792.0], [62.4, 5797.0], [62.5, 5797.0], [62.6, 5818.0], [62.7, 5856.0], [62.8, 5856.0], [62.9, 5890.0], [63.0, 5892.0], [63.1, 5892.0], [63.2, 5912.0], [63.3, 5912.0], [63.4, 5933.0], [63.5, 5936.0], [63.6, 5936.0], [63.7, 5945.0], [63.8, 5945.0], [63.9, 5952.0], [64.0, 5953.0], [64.1, 5953.0], [64.2, 5958.0], [64.3, 5958.0], [64.4, 5967.0], [64.5, 5971.0], [64.6, 5971.0], [64.7, 5979.0], [64.8, 5979.0], [64.9, 5994.0], [65.0, 6003.0], [65.1, 6003.0], [65.2, 6049.0], [65.3, 6055.0], [65.4, 6055.0], [65.5, 6066.0], [65.6, 6066.0], [65.7, 6072.0], [65.8, 6076.0], [65.9, 6076.0], [66.0, 6095.0], [66.1, 6095.0], [66.2, 6115.0], [66.3, 6117.0], [66.4, 6117.0], [66.5, 6151.0], [66.6, 6151.0], [66.7, 6153.0], [66.8, 6201.0], [66.9, 6201.0], [67.0, 6207.0], [67.1, 6207.0], [67.2, 6210.0], [67.3, 6222.0], [67.4, 6222.0], [67.5, 6225.0], [67.6, 6248.0], [67.7, 6248.0], [67.8, 6250.0], [67.9, 6250.0], [68.0, 6289.0], [68.1, 6296.0], [68.2, 6296.0], [68.3, 6306.0], [68.4, 6306.0], [68.5, 6325.0], [68.6, 6362.0], [68.7, 6362.0], [68.8, 6378.0], [68.9, 6378.0], [69.0, 6454.0], [69.1, 6484.0], [69.2, 6484.0], [69.3, 6495.0], [69.4, 6495.0], [69.5, 6522.0], [69.6, 6537.0], [69.7, 6537.0], [69.8, 6563.0], [69.9, 6563.0], [70.0, 6582.0], [70.1, 6586.0], [70.2, 6586.0], [70.3, 6639.0], [70.4, 6656.0], [70.5, 6656.0], [70.6, 6738.0], [70.7, 6738.0], [70.8, 6759.0], [70.9, 6798.0], [71.0, 6798.0], [71.1, 6862.0], [71.2, 6862.0], [71.3, 6884.0], [71.4, 6891.0], [71.5, 6891.0], [71.6, 6911.0], [71.7, 6911.0], [71.8, 6928.0], [71.9, 6943.0], [72.0, 6943.0], [72.1, 6961.0], [72.2, 6961.0], [72.3, 6976.0], [72.4, 7075.0], [72.5, 7075.0], [72.6, 7081.0], [72.7, 7091.0], [72.8, 7091.0], [72.9, 7122.0], [73.0, 7122.0], [73.1, 7155.0], [73.2, 7167.0], [73.3, 7167.0], [73.4, 7168.0], [73.5, 7168.0], [73.6, 7185.0], [73.7, 7191.0], [73.8, 7191.0], [73.9, 7200.0], [74.0, 7200.0], [74.1, 7208.0], [74.2, 7229.0], [74.3, 7229.0], [74.4, 7308.0], [74.5, 7308.0], [74.6, 7323.0], [74.7, 7394.0], [74.8, 7394.0], [74.9, 7446.0], [75.0, 7447.0], [75.1, 7447.0], [75.2, 7461.0], [75.3, 7461.0], [75.4, 7491.0], [75.5, 7493.0], [75.6, 7493.0], [75.7, 7498.0], [75.8, 7498.0], [75.9, 7534.0], [76.0, 7548.0], [76.1, 7548.0], [76.2, 7596.0], [76.3, 7596.0], [76.4, 7600.0], [76.5, 7635.0], [76.6, 7635.0], [76.7, 7641.0], [76.8, 7641.0], [76.9, 7646.0], [77.0, 7689.0], [77.1, 7689.0], [77.2, 7705.0], [77.3, 7705.0], [77.4, 7711.0], [77.5, 7712.0], [77.6, 7712.0], [77.7, 7718.0], [77.8, 7762.0], [77.9, 7762.0], [78.0, 7782.0], [78.1, 7782.0], [78.2, 7861.0], [78.3, 7872.0], [78.4, 7872.0], [78.5, 7887.0], [78.6, 7887.0], [78.7, 8008.0], [78.8, 8042.0], [78.9, 8042.0], [79.0, 8047.0], [79.1, 8047.0], [79.2, 8087.0], [79.3, 8139.0], [79.4, 8139.0], [79.5, 8162.0], [79.6, 8162.0], [79.7, 8249.0], [79.8, 8258.0], [79.9, 8258.0], [80.0, 8270.0], [80.1, 8297.0], [80.2, 8297.0], [80.3, 8387.0], [80.4, 8387.0], [80.5, 8463.0], [80.6, 8531.0], [80.7, 8531.0], [80.8, 8577.0], [80.9, 8577.0], [81.0, 8579.0], [81.1, 8615.0], [81.2, 8615.0], [81.3, 8665.0], [81.4, 8665.0], [81.5, 8677.0], [81.6, 8858.0], [81.7, 8858.0], [81.8, 8885.0], [81.9, 8885.0], [82.0, 8904.0], [82.1, 8997.0], [82.2, 8997.0], [82.3, 9028.0], [82.4, 9028.0], [82.5, 9051.0], [82.6, 9075.0], [82.7, 9075.0], [82.8, 9095.0], [82.9, 9172.0], [83.0, 9172.0], [83.1, 9200.0], [83.2, 9200.0], [83.3, 9228.0], [83.4, 9233.0], [83.5, 9233.0], [83.6, 9252.0], [83.7, 9252.0], [83.8, 9305.0], [83.9, 9336.0], [84.0, 9336.0], [84.1, 9371.0], [84.2, 9371.0], [84.3, 9382.0], [84.4, 9435.0], [84.5, 9435.0], [84.6, 9467.0], [84.7, 9467.0], [84.8, 9497.0], [84.9, 9540.0], [85.0, 9540.0], [85.1, 9558.0], [85.2, 9586.0], [85.3, 9586.0], [85.4, 9612.0], [85.5, 9612.0], [85.6, 9684.0], [85.7, 9704.0], [85.8, 9704.0], [85.9, 9711.0], [86.0, 9711.0], [86.1, 9780.0], [86.2, 9885.0], [86.3, 9885.0], [86.4, 9967.0], [86.5, 9967.0], [86.6, 10014.0], [86.7, 10018.0], [86.8, 10018.0], [86.9, 10020.0], [87.0, 10020.0], [87.1, 10111.0], [87.2, 10141.0], [87.3, 10141.0], [87.4, 10164.0], [87.5, 10178.0], [87.6, 10178.0], [87.7, 10190.0], [87.8, 10190.0], [87.9, 10194.0], [88.0, 10248.0], [88.1, 10248.0], [88.2, 10327.0], [88.3, 10327.0], [88.4, 10418.0], [88.5, 10474.0], [88.6, 10474.0], [88.7, 10480.0], [88.8, 10480.0], [88.9, 10510.0], [89.0, 10521.0], [89.1, 10521.0], [89.2, 10634.0], [89.3, 10634.0], [89.4, 10636.0], [89.5, 10689.0], [89.6, 10689.0], [89.7, 10718.0], [89.8, 10718.0], [89.9, 10768.0], [90.0, 10886.0], [90.1, 10886.0], [90.2, 10943.0], [90.3, 10977.0], [90.4, 10977.0], [90.5, 11047.0], [90.6, 11047.0], [90.7, 11229.0], [90.8, 11239.0], [90.9, 11239.0], [91.0, 11285.0], [91.1, 11285.0], [91.2, 11303.0], [91.3, 11328.0], [91.4, 11328.0], [91.5, 11333.0], [91.6, 11333.0], [91.7, 11364.0], [91.8, 11471.0], [91.9, 11471.0], [92.0, 11645.0], [92.1, 11645.0], [92.2, 11714.0], [92.3, 11802.0], [92.4, 11802.0], [92.5, 11809.0], [92.6, 11908.0], [92.7, 11908.0], [92.8, 12026.0], [92.9, 12026.0], [93.0, 12034.0], [93.1, 12227.0], [93.2, 12227.0], [93.3, 12315.0], [93.4, 12315.0], [93.5, 12319.0], [93.6, 12390.0], [93.7, 12390.0], [93.8, 12391.0], [93.9, 12391.0], [94.0, 12431.0], [94.1, 12450.0], [94.2, 12450.0], [94.3, 12471.0], [94.4, 12471.0], [94.5, 12537.0], [94.6, 12612.0], [94.7, 12612.0], [94.8, 12772.0], [94.9, 12772.0], [95.0, 12813.0], [95.1, 12839.0], [95.2, 12839.0], [95.3, 13283.0], [95.4, 13299.0], [95.5, 13299.0], [95.6, 13499.0], [95.7, 13499.0], [95.8, 13627.0], [95.9, 13766.0], [96.0, 13766.0], [96.1, 14009.0], [96.2, 14009.0], [96.3, 14067.0], [96.4, 14337.0], [96.5, 14337.0], [96.6, 14425.0], [96.7, 14425.0], [96.8, 14538.0], [96.9, 14558.0], [97.0, 14558.0], [97.1, 14658.0], [97.2, 14658.0], [97.3, 15206.0], [97.4, 15300.0], [97.5, 15300.0], [97.6, 15360.0], [97.7, 15539.0], [97.8, 15539.0], [97.9, 15570.0], [98.0, 15570.0], [98.1, 15583.0], [98.2, 15685.0], [98.3, 15685.0], [98.4, 15740.0], [98.5, 15740.0], [98.6, 16164.0], [98.7, 16356.0], [98.8, 16356.0], [98.9, 17300.0], [99.0, 17300.0], [99.1, 17377.0], [99.2, 17515.0], [99.3, 17515.0], [99.4, 19387.0], [99.5, 19387.0], [99.6, 19474.0], [99.7, 21852.0], [99.8, 21852.0], [99.9, 22275.0]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[0.0, 777.0], [0.1, 777.0], [0.2, 807.0], [0.3, 807.0], [0.4, 821.0], [0.5, 830.0], [0.6, 830.0], [0.7, 842.0], [0.8, 842.0], [0.9, 922.0], [1.0, 963.0], [1.1, 963.0], [1.2, 973.0], [1.3, 973.0], [1.4, 1024.0], [1.5, 1031.0], [1.6, 1031.0], [1.7, 1101.0], [1.8, 1101.0], [1.9, 1164.0], [2.0, 1222.0], [2.1, 1222.0], [2.2, 1273.0], [2.3, 1273.0], [2.4, 1288.0], [2.5, 1293.0], [2.6, 1293.0], [2.7, 1302.0], [2.8, 1302.0], [2.9, 1376.0], [3.0, 1394.0], [3.1, 1394.0], [3.2, 1414.0], [3.3, 1414.0], [3.4, 1438.0], [3.5, 1475.0], [3.6, 1475.0], [3.7, 1481.0], [3.8, 1481.0], [3.9, 1485.0], [4.0, 1507.0], [4.1, 1507.0], [4.2, 1509.0], [4.3, 1509.0], [4.4, 1518.0], [4.5, 1536.0], [4.6, 1536.0], [4.7, 1540.0], [4.8, 1540.0], [4.9, 1544.0], [5.0, 1552.0], [5.1, 1552.0], [5.2, 1571.0], [5.3, 1627.0], [5.4, 1627.0], [5.5, 1634.0], [5.6, 1634.0], [5.7, 1642.0], [5.8, 1650.0], [5.9, 1650.0], [6.0, 1653.0], [6.1, 1653.0], [6.2, 1674.0], [6.3, 1712.0], [6.4, 1712.0], [6.5, 1722.0], [6.6, 1722.0], [6.7, 1730.0], [6.8, 1773.0], [6.9, 1773.0], [7.0, 1800.0], [7.1, 1800.0], [7.2, 1807.0], [7.3, 1861.0], [7.4, 1861.0], [7.5, 1884.0], [7.6, 1884.0], [7.7, 1894.0], [7.8, 1919.0], [7.9, 1919.0], [8.0, 2102.0], [8.1, 2102.0], [8.2, 2118.0], [8.3, 2146.0], [8.4, 2146.0], [8.5, 2164.0], [8.6, 2164.0], [8.7, 2176.0], [8.8, 2178.0], [8.9, 2178.0], [9.0, 2189.0], [9.1, 2189.0], [9.2, 2203.0], [9.3, 2244.0], [9.4, 2244.0], [9.5, 2312.0], [9.6, 2312.0], [9.7, 2349.0], [9.8, 2352.0], [9.9, 2352.0], [10.0, 2353.0], [10.1, 2354.0], [10.2, 2354.0], [10.3, 2360.0], [10.4, 2360.0], [10.5, 2373.0], [10.6, 2431.0], [10.7, 2431.0], [10.8, 2462.0], [10.9, 2462.0], [11.0, 2472.0], [11.1, 2501.0], [11.2, 2501.0], [11.3, 2509.0], [11.4, 2509.0], [11.5, 2534.0], [11.6, 2551.0], [11.7, 2551.0], [11.8, 2552.0], [11.9, 2552.0], [12.0, 2559.0], [12.1, 2563.0], [12.2, 2563.0], [12.3, 2579.0], [12.4, 2579.0], [12.5, 2583.0], [12.6, 2590.0], [12.7, 2590.0], [12.8, 2591.0], [12.9, 2591.0], [13.0, 2605.0], [13.1, 2638.0], [13.2, 2638.0], [13.3, 2654.0], [13.4, 2654.0], [13.5, 2660.0], [13.6, 2661.0], [13.7, 2661.0], [13.8, 2662.0], [13.9, 2662.0], [14.0, 2666.0], [14.1, 2675.0], [14.2, 2675.0], [14.3, 2685.0], [14.4, 2685.0], [14.5, 2691.0], [14.6, 2692.0], [14.7, 2692.0], [14.8, 2695.0], [14.9, 2695.0], [15.0, 2707.0], [15.1, 2741.0], [15.2, 2741.0], [15.3, 2743.0], [15.4, 2746.0], [15.5, 2746.0], [15.6, 2753.0], [15.7, 2753.0], [15.8, 2776.0], [15.9, 2776.0], [16.0, 2776.0], [16.1, 2788.0], [16.2, 2788.0], [16.3, 2792.0], [16.4, 2793.0], [16.5, 2793.0], [16.6, 2805.0], [16.7, 2805.0], [16.8, 2814.0], [16.9, 2814.0], [17.0, 2814.0], [17.1, 2815.0], [17.2, 2815.0], [17.3, 2816.0], [17.4, 2818.0], [17.5, 2818.0], [17.6, 2824.0], [17.7, 2824.0], [17.8, 2825.0], [17.9, 2826.0], [18.0, 2826.0], [18.1, 2834.0], [18.2, 2834.0], [18.3, 2837.0], [18.4, 2853.0], [18.5, 2853.0], [18.6, 2854.0], [18.7, 2854.0], [18.8, 2856.0], [18.9, 2867.0], [19.0, 2867.0], [19.1, 2875.0], [19.2, 2875.0], [19.3, 2875.0], [19.4, 2886.0], [19.5, 2886.0], [19.6, 2904.0], [19.7, 2904.0], [19.8, 2907.0], [19.9, 2911.0], [20.0, 2911.0], [20.1, 2912.0], [20.2, 2924.0], [20.3, 2924.0], [20.4, 2947.0], [20.5, 2947.0], [20.6, 2954.0], [20.7, 2954.0], [20.8, 2954.0], [20.9, 2956.0], [21.0, 2956.0], [21.1, 2981.0], [21.2, 2993.0], [21.3, 2993.0], [21.4, 2995.0], [21.5, 2995.0], [21.6, 2997.0], [21.7, 2998.0], [21.8, 2998.0], [21.9, 3000.0], [22.0, 3000.0], [22.1, 3006.0], [22.2, 3012.0], [22.3, 3012.0], [22.4, 3037.0], [22.5, 3037.0], [22.6, 3039.0], [22.7, 3055.0], [22.8, 3055.0], [22.9, 3062.0], [23.0, 3062.0], [23.1, 3062.0], [23.2, 3067.0], [23.3, 3067.0], [23.4, 3086.0], [23.5, 3086.0], [23.6, 3092.0], [23.7, 3095.0], [23.8, 3095.0], [23.9, 3095.0], [24.0, 3095.0], [24.1, 3101.0], [24.2, 3112.0], [24.3, 3112.0], [24.4, 3149.0], [24.5, 3149.0], [24.6, 3157.0], [24.7, 3161.0], [24.8, 3161.0], [24.9, 3169.0], [25.0, 3183.0], [25.1, 3183.0], [25.2, 3185.0], [25.3, 3185.0], [25.4, 3191.0], [25.5, 3216.0], [25.6, 3216.0], [25.7, 3223.0], [25.8, 3223.0], [25.9, 3239.0], [26.0, 3240.0], [26.1, 3240.0], [26.2, 3248.0], [26.3, 3248.0], [26.4, 3256.0], [26.5, 3258.0], [26.6, 3258.0], [26.7, 3266.0], [26.8, 3266.0], [26.9, 3286.0], [27.0, 3295.0], [27.1, 3295.0], [27.2, 3313.0], [27.3, 3313.0], [27.4, 3326.0], [27.5, 3343.0], [27.6, 3343.0], [27.7, 3350.0], [27.8, 3350.0], [27.9, 3361.0], [28.0, 3375.0], [28.1, 3375.0], [28.2, 3388.0], [28.3, 3388.0], [28.4, 3405.0], [28.5, 3406.0], [28.6, 3406.0], [28.7, 3418.0], [28.8, 3418.0], [28.9, 3432.0], [29.0, 3434.0], [29.1, 3434.0], [29.2, 3441.0], [29.3, 3441.0], [29.4, 3451.0], [29.5, 3458.0], [29.6, 3458.0], [29.7, 3459.0], [29.8, 3459.0], [29.9, 3468.0], [30.0, 3471.0], [30.1, 3471.0], [30.2, 3471.0], [30.3, 3475.0], [30.4, 3475.0], [30.5, 3479.0], [30.6, 3479.0], [30.7, 3491.0], [30.8, 3493.0], [30.9, 3493.0], [31.0, 3513.0], [31.1, 3513.0], [31.2, 3530.0], [31.3, 3539.0], [31.4, 3539.0], [31.5, 3541.0], [31.6, 3541.0], [31.7, 3552.0], [31.8, 3557.0], [31.9, 3557.0], [32.0, 3583.0], [32.1, 3583.0], [32.2, 3583.0], [32.3, 3584.0], [32.4, 3584.0], [32.5, 3597.0], [32.6, 3597.0], [32.7, 3598.0], [32.8, 3610.0], [32.9, 3610.0], [33.0, 3615.0], [33.1, 3615.0], [33.2, 3626.0], [33.3, 3626.0], [33.4, 3626.0], [33.5, 3630.0], [33.6, 3630.0], [33.7, 3632.0], [33.8, 3632.0], [33.9, 3632.0], [34.0, 3652.0], [34.1, 3652.0], [34.2, 3659.0], [34.3, 3672.0], [34.4, 3672.0], [34.5, 3684.0], [34.6, 3684.0], [34.7, 3696.0], [34.8, 3749.0], [34.9, 3749.0], [35.0, 3753.0], [35.1, 3764.0], [35.2, 3764.0], [35.3, 3766.0], [35.4, 3766.0], [35.5, 3801.0], [35.6, 3813.0], [35.7, 3813.0], [35.8, 3831.0], [35.9, 3831.0], [36.0, 3832.0], [36.1, 3833.0], [36.2, 3833.0], [36.3, 3875.0], [36.4, 3875.0], [36.5, 3880.0], [36.6, 3880.0], [36.7, 3880.0], [36.8, 3910.0], [36.9, 3910.0], [37.0, 3912.0], [37.1, 3962.0], [37.2, 3962.0], [37.3, 3969.0], [37.4, 3969.0], [37.5, 4002.0], [37.6, 4006.0], [37.7, 4006.0], [37.8, 4026.0], [37.9, 4026.0], [38.0, 4029.0], [38.1, 4036.0], [38.2, 4036.0], [38.3, 4055.0], [38.4, 4055.0], [38.5, 4058.0], [38.6, 4077.0], [38.7, 4077.0], [38.8, 4086.0], [38.9, 4086.0], [39.0, 4088.0], [39.1, 4104.0], [39.2, 4104.0], [39.3, 4114.0], [39.4, 4114.0], [39.5, 4126.0], [39.6, 4126.0], [39.7, 4126.0], [39.8, 4132.0], [39.9, 4132.0], [40.0, 4134.0], [40.1, 4138.0], [40.2, 4138.0], [40.3, 4141.0], [40.4, 4146.0], [40.5, 4146.0], [40.6, 4151.0], [40.7, 4151.0], [40.8, 4153.0], [40.9, 4161.0], [41.0, 4161.0], [41.1, 4176.0], [41.2, 4176.0], [41.3, 4200.0], [41.4, 4218.0], [41.5, 4218.0], [41.6, 4220.0], [41.7, 4220.0], [41.8, 4230.0], [41.9, 4252.0], [42.0, 4252.0], [42.1, 4262.0], [42.2, 4262.0], [42.3, 4286.0], [42.4, 4290.0], [42.5, 4290.0], [42.6, 4293.0], [42.7, 4293.0], [42.8, 4297.0], [42.9, 4303.0], [43.0, 4303.0], [43.1, 4312.0], [43.2, 4312.0], [43.3, 4318.0], [43.4, 4323.0], [43.5, 4323.0], [43.6, 4333.0], [43.7, 4333.0], [43.8, 4348.0], [43.9, 4348.0], [44.0, 4348.0], [44.1, 4349.0], [44.2, 4349.0], [44.3, 4350.0], [44.4, 4351.0], [44.5, 4351.0], [44.6, 4371.0], [44.7, 4371.0], [44.8, 4383.0], [44.9, 4385.0], [45.0, 4385.0], [45.1, 4387.0], [45.2, 4410.0], [45.3, 4410.0], [45.4, 4414.0], [45.5, 4414.0], [45.6, 4421.0], [45.7, 4424.0], [45.8, 4424.0], [45.9, 4426.0], [46.0, 4426.0], [46.1, 4426.0], [46.2, 4436.0], [46.3, 4436.0], [46.4, 4467.0], [46.5, 4467.0], [46.6, 4481.0], [46.7, 4488.0], [46.8, 4488.0], [46.9, 4513.0], [47.0, 4513.0], [47.1, 4524.0], [47.2, 4524.0], [47.3, 4524.0], [47.4, 4534.0], [47.5, 4534.0], [47.6, 4562.0], [47.7, 4575.0], [47.8, 4575.0], [47.9, 4579.0], [48.0, 4579.0], [48.1, 4584.0], [48.2, 4612.0], [48.3, 4612.0], [48.4, 4619.0], [48.5, 4619.0], [48.6, 4624.0], [48.7, 4627.0], [48.8, 4627.0], [48.9, 4629.0], [49.0, 4629.0], [49.1, 4638.0], [49.2, 4644.0], [49.3, 4644.0], [49.4, 4647.0], [49.5, 4647.0], [49.6, 4658.0], [49.7, 4679.0], [49.8, 4679.0], [49.9, 4709.0], [50.0, 4709.0], [50.1, 4736.0], [50.2, 4742.0], [50.3, 4742.0], [50.4, 4750.0], [50.5, 4751.0], [50.6, 4751.0], [50.7, 4754.0], [50.8, 4754.0], [50.9, 4760.0], [51.0, 4789.0], [51.1, 4789.0], [51.2, 4789.0], [51.3, 4789.0], [51.4, 4796.0], [51.5, 4804.0], [51.6, 4804.0], [51.7, 4821.0], [51.8, 4821.0], [51.9, 4834.0], [52.0, 4878.0], [52.1, 4878.0], [52.2, 4889.0], [52.3, 4889.0], [52.4, 4891.0], [52.5, 4900.0], [52.6, 4900.0], [52.7, 4919.0], [52.8, 4919.0], [52.9, 4919.0], [53.0, 4962.0], [53.1, 4962.0], [53.2, 4964.0], [53.3, 4964.0], [53.4, 4970.0], [53.5, 5028.0], [53.6, 5028.0], [53.7, 5030.0], [53.8, 5030.0], [53.9, 5067.0], [54.0, 5068.0], [54.1, 5068.0], [54.2, 5108.0], [54.3, 5108.0], [54.4, 5109.0], [54.5, 5113.0], [54.6, 5113.0], [54.7, 5129.0], [54.8, 5129.0], [54.9, 5131.0], [55.0, 5146.0], [55.1, 5146.0], [55.2, 5185.0], [55.3, 5203.0], [55.4, 5203.0], [55.5, 5206.0], [55.6, 5206.0], [55.7, 5220.0], [55.8, 5223.0], [55.9, 5223.0], [56.0, 5252.0], [56.1, 5252.0], [56.2, 5256.0], [56.3, 5282.0], [56.4, 5282.0], [56.5, 5308.0], [56.6, 5308.0], [56.7, 5309.0], [56.8, 5310.0], [56.9, 5310.0], [57.0, 5336.0], [57.1, 5336.0], [57.2, 5347.0], [57.3, 5355.0], [57.4, 5355.0], [57.5, 5391.0], [57.6, 5391.0], [57.7, 5391.0], [57.8, 5422.0], [57.9, 5422.0], [58.0, 5422.0], [58.1, 5422.0], [58.2, 5429.0], [58.3, 5433.0], [58.4, 5433.0], [58.5, 5463.0], [58.6, 5463.0], [58.7, 5501.0], [58.8, 5504.0], [58.9, 5504.0], [59.0, 5509.0], [59.1, 5509.0], [59.2, 5511.0], [59.3, 5512.0], [59.4, 5512.0], [59.5, 5519.0], [59.6, 5519.0], [59.7, 5540.0], [59.8, 5583.0], [59.9, 5583.0], [60.0, 5618.0], [60.1, 5623.0], [60.2, 5623.0], [60.3, 5635.0], [60.4, 5635.0], [60.5, 5659.0], [60.6, 5661.0], [60.7, 5661.0], [60.8, 5662.0], [60.9, 5662.0], [61.0, 5666.0], [61.1, 5690.0], [61.2, 5690.0], [61.3, 5732.0], [61.4, 5732.0], [61.5, 5735.0], [61.6, 5745.0], [61.7, 5745.0], [61.8, 5746.0], [61.9, 5746.0], [62.0, 5768.0], [62.1, 5797.0], [62.2, 5797.0], [62.3, 5818.0], [62.4, 5818.0], [62.5, 5856.0], [62.6, 5871.0], [62.7, 5871.0], [62.8, 5890.0], [62.9, 5890.0], [63.0, 5892.0], [63.1, 5912.0], [63.2, 5912.0], [63.3, 5933.0], [63.4, 5933.0], [63.5, 5936.0], [63.6, 5939.0], [63.7, 5939.0], [63.8, 5945.0], [63.9, 5945.0], [64.0, 5952.0], [64.1, 5953.0], [64.2, 5953.0], [64.3, 5958.0], [64.4, 5958.0], [64.5, 5965.0], [64.6, 5967.0], [64.7, 5967.0], [64.8, 5971.0], [64.9, 5971.0], [65.0, 5993.0], [65.1, 5994.0], [65.2, 5994.0], [65.3, 6003.0], [65.4, 6008.0], [65.5, 6008.0], [65.6, 6046.0], [65.7, 6046.0], [65.8, 6055.0], [65.9, 6066.0], [66.0, 6066.0], [66.1, 6076.0], [66.2, 6076.0], [66.3, 6105.0], [66.4, 6115.0], [66.5, 6115.0], [66.6, 6146.0], [66.7, 6146.0], [66.8, 6151.0], [66.9, 6201.0], [67.0, 6201.0], [67.1, 6207.0], [67.2, 6207.0], [67.3, 6222.0], [67.4, 6225.0], [67.5, 6225.0], [67.6, 6248.0], [67.7, 6248.0], [67.8, 6289.0], [67.9, 6296.0], [68.0, 6296.0], [68.1, 6306.0], [68.2, 6306.0], [68.3, 6325.0], [68.4, 6362.0], [68.5, 6362.0], [68.6, 6378.0], [68.7, 6378.0], [68.8, 6415.0], [68.9, 6436.0], [69.0, 6436.0], [69.1, 6454.0], [69.2, 6454.0], [69.3, 6479.0], [69.4, 6484.0], [69.5, 6484.0], [69.6, 6495.0], [69.7, 6495.0], [69.8, 6552.0], [69.9, 6563.0], [70.0, 6563.0], [70.1, 6582.0], [70.2, 6639.0], [70.3, 6639.0], [70.4, 6691.0], [70.5, 6691.0], [70.6, 6738.0], [70.7, 6759.0], [70.8, 6759.0], [70.9, 6778.0], [71.0, 6778.0], [71.1, 6842.0], [71.2, 6862.0], [71.3, 6862.0], [71.4, 6884.0], [71.5, 6884.0], [71.6, 6911.0], [71.7, 6928.0], [71.8, 6928.0], [71.9, 6961.0], [72.0, 6961.0], [72.1, 6976.0], [72.2, 6986.0], [72.3, 6986.0], [72.4, 7020.0], [72.5, 7020.0], [72.6, 7053.0], [72.7, 7075.0], [72.8, 7075.0], [72.9, 7081.0], [73.0, 7081.0], [73.1, 7083.0], [73.2, 7090.0], [73.3, 7090.0], [73.4, 7167.0], [73.5, 7167.0], [73.6, 7168.0], [73.7, 7191.0], [73.8, 7191.0], [73.9, 7208.0], [74.0, 7208.0], [74.1, 7211.0], [74.2, 7229.0], [74.3, 7229.0], [74.4, 7308.0], [74.5, 7308.0], [74.6, 7382.0], [74.7, 7394.0], [74.8, 7394.0], [74.9, 7443.0], [75.0, 7446.0], [75.1, 7446.0], [75.2, 7447.0], [75.3, 7447.0], [75.4, 7461.0], [75.5, 7493.0], [75.6, 7493.0], [75.7, 7494.0], [75.8, 7494.0], [75.9, 7495.0], [76.0, 7498.0], [76.1, 7498.0], [76.2, 7534.0], [76.3, 7534.0], [76.4, 7598.0], [76.5, 7635.0], [76.6, 7635.0], [76.7, 7641.0], [76.8, 7641.0], [76.9, 7646.0], [77.0, 7689.0], [77.1, 7689.0], [77.2, 7705.0], [77.3, 7705.0], [77.4, 7712.0], [77.5, 7718.0], [77.6, 7718.0], [77.7, 7762.0], [77.8, 7762.0], [77.9, 7782.0], [78.0, 7861.0], [78.1, 7861.0], [78.2, 7872.0], [78.3, 7872.0], [78.4, 7887.0], [78.5, 7906.0], [78.6, 7906.0], [78.7, 7933.0], [78.8, 7933.0], [78.9, 7975.0], [79.0, 8042.0], [79.1, 8042.0], [79.2, 8060.0], [79.3, 8060.0], [79.4, 8139.0], [79.5, 8169.0], [79.6, 8169.0], [79.7, 8249.0], [79.8, 8249.0], [79.9, 8258.0], [80.0, 8297.0], [80.1, 8297.0], [80.2, 8387.0], [80.3, 8463.0], [80.4, 8463.0], [80.5, 8531.0], [80.6, 8531.0], [80.7, 8577.0], [80.8, 8579.0], [80.9, 8579.0], [81.0, 8615.0], [81.1, 8615.0], [81.2, 8665.0], [81.3, 8677.0], [81.4, 8677.0], [81.5, 8773.0], [81.6, 8773.0], [81.7, 8858.0], [81.8, 8904.0], [81.9, 8904.0], [82.0, 8973.0], [82.1, 8973.0], [82.2, 8997.0], [82.3, 9028.0], [82.4, 9028.0], [82.5, 9051.0], [82.6, 9051.0], [82.7, 9095.0], [82.8, 9140.0], [82.9, 9140.0], [83.0, 9172.0], [83.1, 9172.0], [83.2, 9197.0], [83.3, 9200.0], [83.4, 9200.0], [83.5, 9228.0], [83.6, 9228.0], [83.7, 9233.0], [83.8, 9336.0], [83.9, 9336.0], [84.0, 9371.0], [84.1, 9371.0], [84.2, 9382.0], [84.3, 9430.0], [84.4, 9430.0], [84.5, 9435.0], [84.6, 9435.0], [84.7, 9453.0], [84.8, 9467.0], [84.9, 9467.0], [85.0, 9497.0], [85.1, 9586.0], [85.2, 9586.0], [85.3, 9612.0], [85.4, 9612.0], [85.5, 9684.0], [85.6, 9704.0], [85.7, 9704.0], [85.8, 9711.0], [85.9, 9711.0], [86.0, 9780.0], [86.1, 9854.0], [86.2, 9854.0], [86.3, 9885.0], [86.4, 9885.0], [86.5, 9918.0], [86.6, 10006.0], [86.7, 10006.0], [86.8, 10014.0], [86.9, 10014.0], [87.0, 10018.0], [87.1, 10058.0], [87.2, 10058.0], [87.3, 10141.0], [87.4, 10141.0], [87.5, 10178.0], [87.6, 10190.0], [87.7, 10190.0], [87.8, 10194.0], [87.9, 10194.0], [88.0, 10248.0], [88.1, 10305.0], [88.2, 10305.0], [88.3, 10327.0], [88.4, 10327.0], [88.5, 10474.0], [88.6, 10480.0], [88.7, 10480.0], [88.8, 10510.0], [88.9, 10510.0], [89.0, 10521.0], [89.1, 10533.0], [89.2, 10533.0], [89.3, 10636.0], [89.4, 10636.0], [89.5, 10657.0], [89.6, 10689.0], [89.7, 10689.0], [89.8, 10718.0], [89.9, 10718.0], [90.0, 10886.0], [90.1, 10943.0], [90.2, 10943.0], [90.3, 10977.0], [90.4, 11047.0], [90.5, 11047.0], [90.6, 11176.0], [90.7, 11176.0], [90.8, 11197.0], [90.9, 11229.0], [91.0, 11229.0], [91.1, 11239.0], [91.2, 11239.0], [91.3, 11328.0], [91.4, 11333.0], [91.5, 11333.0], [91.6, 11364.0], [91.7, 11364.0], [91.8, 11471.0], [91.9, 11607.0], [92.0, 11607.0], [92.1, 11645.0], [92.2, 11645.0], [92.3, 11802.0], [92.4, 11809.0], [92.5, 11809.0], [92.6, 11908.0], [92.7, 11908.0], [92.8, 11918.0], [92.9, 12034.0], [93.0, 12034.0], [93.1, 12115.0], [93.2, 12115.0], [93.3, 12287.0], [93.4, 12315.0], [93.5, 12315.0], [93.6, 12319.0], [93.7, 12319.0], [93.8, 12391.0], [93.9, 12431.0], [94.0, 12431.0], [94.1, 12450.0], [94.2, 12450.0], [94.3, 12471.0], [94.4, 12510.0], [94.5, 12510.0], [94.6, 12537.0], [94.7, 12537.0], [94.8, 12669.0], [94.9, 12706.0], [95.0, 12706.0], [95.1, 12839.0], [95.2, 13283.0], [95.3, 13283.0], [95.4, 13299.0], [95.5, 13299.0], [95.6, 13390.0], [95.7, 13524.0], [95.8, 13524.0], [95.9, 13665.0], [96.0, 13665.0], [96.1, 13900.0], [96.2, 14067.0], [96.3, 14067.0], [96.4, 14337.0], [96.5, 14337.0], [96.6, 14425.0], [96.7, 14437.0], [96.8, 14437.0], [96.9, 14558.0], [97.0, 14558.0], [97.1, 14658.0], [97.2, 15096.0], [97.3, 15096.0], [97.4, 15300.0], [97.5, 15300.0], [97.6, 15360.0], [97.7, 15471.0], [97.8, 15471.0], [97.9, 15539.0], [98.0, 15539.0], [98.1, 15570.0], [98.2, 15685.0], [98.3, 15685.0], [98.4, 15740.0], [98.5, 15740.0], [98.6, 16164.0], [98.7, 16356.0], [98.8, 16356.0], [98.9, 17300.0], [99.0, 17300.0], [99.1, 17377.0], [99.2, 17515.0], [99.3, 17515.0], [99.4, 19387.0], [99.5, 19387.0], [99.6, 19474.0], [99.7, 21852.0], [99.8, 21852.0], [99.9, 22172.0]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 18.0, "series": [{"data": [[0.0, 4.0], [700.0, 1.0], [800.0, 4.0], [900.0, 3.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 4.0], [1300.0, 3.0], [1400.0, 5.0], [1500.0, 8.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 5.0], [1900.0, 1.0], [2100.0, 7.0], [2200.0, 2.0], [2300.0, 7.0], [2400.0, 3.0], [2500.0, 11.0], [2600.0, 12.0], [2700.0, 9.0], [2800.0, 17.0], [2900.0, 13.0], [3000.0, 15.0], [3100.0, 9.0], [3200.0, 11.0], [3300.0, 6.0], [3400.0, 17.0], [3500.0, 9.0], [3600.0, 14.0], [3700.0, 4.0], [3800.0, 5.0], [3900.0, 7.0], [4000.0, 9.0], [4300.0, 16.0], [4100.0, 13.0], [4200.0, 9.0], [4500.0, 9.0], [4400.0, 8.0], [4600.0, 9.0], [4700.0, 10.0], [4800.0, 8.0], [4900.0, 4.0], [5100.0, 7.0], [5000.0, 5.0], [5200.0, 5.0], [5300.0, 10.0], [5600.0, 8.0], [5500.0, 8.0], [5400.0, 5.0], [5700.0, 7.0], [5800.0, 4.0], [5900.0, 11.0], [6000.0, 7.0], [6100.0, 4.0], [6200.0, 9.0], [6300.0, 4.0], [6600.0, 2.0], [6500.0, 5.0], [6400.0, 3.0], [6700.0, 3.0], [6900.0, 5.0], [6800.0, 3.0], [7100.0, 6.0], [7000.0, 3.0], [7400.0, 6.0], [7300.0, 3.0], [7200.0, 3.0], [7600.0, 5.0], [7500.0, 3.0], [7800.0, 3.0], [7700.0, 6.0], [8000.0, 4.0], [8100.0, 2.0], [8200.0, 4.0], [8500.0, 3.0], [8600.0, 3.0], [8400.0, 1.0], [8300.0, 1.0], [9000.0, 4.0], [8900.0, 2.0], [9200.0, 4.0], [8800.0, 2.0], [9100.0, 1.0], [9700.0, 3.0], [9600.0, 2.0], [9500.0, 3.0], [9300.0, 4.0], [9400.0, 3.0], [10100.0, 6.0], [10200.0, 1.0], [9800.0, 1.0], [10000.0, 3.0], [9900.0, 1.0], [10500.0, 2.0], [10400.0, 3.0], [10700.0, 2.0], [10600.0, 3.0], [10300.0, 1.0], [11200.0, 3.0], [10800.0, 1.0], [10900.0, 2.0], [11000.0, 1.0], [11300.0, 4.0], [11600.0, 1.0], [11400.0, 1.0], [11700.0, 1.0], [12000.0, 2.0], [11800.0, 2.0], [11900.0, 1.0], [12200.0, 1.0], [12400.0, 3.0], [12300.0, 4.0], [12500.0, 1.0], [12700.0, 1.0], [12600.0, 1.0], [13200.0, 2.0], [12800.0, 2.0], [13700.0, 1.0], [13400.0, 1.0], [13600.0, 1.0], [14000.0, 2.0], [14300.0, 1.0], [14400.0, 1.0], [14600.0, 1.0], [14500.0, 2.0], [15300.0, 2.0], [15200.0, 1.0], [15700.0, 1.0], [15600.0, 1.0], [15500.0, 3.0], [16300.0, 1.0], [16100.0, 1.0], [17300.0, 2.0], [17500.0, 1.0], [19400.0, 1.0], [19300.0, 1.0], [21800.0, 1.0], [22200.0, 1.0]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[700.0, 1.0], [800.0, 4.0], [900.0, 3.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 4.0], [1300.0, 3.0], [1400.0, 5.0], [1500.0, 8.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 5.0], [1900.0, 1.0], [2100.0, 7.0], [2200.0, 2.0], [2300.0, 7.0], [2400.0, 3.0], [2500.0, 11.0], [2600.0, 12.0], [2700.0, 10.0], [2800.0, 18.0], [2900.0, 14.0], [3000.0, 13.0], [3100.0, 9.0], [3200.0, 10.0], [3300.0, 7.0], [3400.0, 16.0], [3500.0, 11.0], [3600.0, 12.0], [3700.0, 4.0], [3800.0, 8.0], [3900.0, 4.0], [4000.0, 10.0], [4300.0, 14.0], [4100.0, 13.0], [4200.0, 10.0], [4500.0, 8.0], [4400.0, 10.0], [4600.0, 10.0], [4700.0, 10.0], [4800.0, 6.0], [4900.0, 6.0], [5100.0, 7.0], [5000.0, 4.0], [5200.0, 7.0], [5300.0, 8.0], [5600.0, 8.0], [5500.0, 8.0], [5400.0, 5.0], [5700.0, 6.0], [5800.0, 5.0], [5900.0, 13.0], [6000.0, 6.0], [6100.0, 4.0], [6200.0, 7.0], [6300.0, 4.0], [6600.0, 2.0], [6500.0, 3.0], [6400.0, 6.0], [6700.0, 3.0], [6900.0, 5.0], [6800.0, 3.0], [7100.0, 3.0], [7000.0, 6.0], [7400.0, 8.0], [7300.0, 3.0], [7200.0, 3.0], [7600.0, 4.0], [7500.0, 2.0], [7800.0, 3.0], [7700.0, 5.0], [7900.0, 3.0], [8000.0, 2.0], [8100.0, 2.0], [8200.0, 3.0], [8500.0, 3.0], [8600.0, 3.0], [8400.0, 1.0], [8300.0, 1.0], [8700.0, 1.0], [9000.0, 3.0], [8900.0, 3.0], [9200.0, 3.0], [8800.0, 1.0], [9100.0, 3.0], [9700.0, 3.0], [9600.0, 2.0], [9500.0, 1.0], [9300.0, 3.0], [9400.0, 5.0], [10100.0, 4.0], [10200.0, 1.0], [9800.0, 2.0], [10000.0, 4.0], [9900.0, 1.0], [10500.0, 3.0], [10400.0, 2.0], [10700.0, 1.0], [10600.0, 3.0], [10300.0, 2.0], [11200.0, 2.0], [10800.0, 1.0], [10900.0, 2.0], [11000.0, 1.0], [11100.0, 2.0], [11300.0, 3.0], [11600.0, 2.0], [11400.0, 1.0], [12000.0, 1.0], [11800.0, 2.0], [11900.0, 2.0], [12100.0, 1.0], [12200.0, 1.0], [12400.0, 3.0], [12300.0, 3.0], [12500.0, 2.0], [12600.0, 1.0], [12700.0, 1.0], [13200.0, 2.0], [12800.0, 1.0], [13300.0, 1.0], [13600.0, 1.0], [13500.0, 1.0], [14000.0, 1.0], [14300.0, 1.0], [13900.0, 1.0], [14400.0, 2.0], [14600.0, 1.0], [14500.0, 1.0], [15300.0, 2.0], [15000.0, 1.0], [15700.0, 1.0], [15600.0, 1.0], [15500.0, 2.0], [15400.0, 1.0], [16300.0, 1.0], [16100.0, 1.0], [17300.0, 2.0], [17500.0, 1.0], [19400.0, 1.0], [19300.0, 1.0], [21800.0, 1.0], [22100.0, 1.0]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 676.0, "series": [{"data": [[0.0, 4.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 24.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 676.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 87.89108910891099, "minX": 1.75250106E12, "maxY": 87.89108910891099, "series": [{"data": [[1.75250106E12, 87.89108910891099]], "isOverall": false, "label": "3_Spike_Test_200Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75250106E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1358.6666666666667, "minX": 1.0, "maxY": 14009.0, "series": [{"data": [[3.0, 7206.0], [4.0, 6210.0], [5.0, 8885.0], [6.0, 5138.0], [7.0, 10111.0], [8.0, 7200.0], [9.0, 12813.0], [10.0, 4852.0], [11.0, 10020.0], [12.0, 10164.0], [13.0, 14009.0], [14.0, 8008.0], [15.0, 7548.0], [16.0, 6586.0], [18.0, 7843.5], [19.0, 10418.0], [20.0, 7491.0], [21.0, 6798.0], [22.0, 12612.0], [23.0, 9540.0], [24.0, 13627.0], [25.0, 2672.0], [26.0, 3996.0], [27.0, 5354.0], [28.0, 2232.666666666667], [29.0, 7672.5], [30.0, 12772.0], [31.0, 4325.0], [32.0, 2110.666666666667], [33.0, 6537.0], [35.0, 5295.0], [34.0, 9075.0], [36.0, 4363.0], [37.0, 6049.0], [38.0, 1358.6666666666667], [39.0, 3291.1666666666665], [41.0, 10768.0], [40.0, 6072.0], [43.0, 8503.0], [42.0, 3935.0], [44.0, 2475.5], [45.0, 6163.5], [47.0, 6943.0], [46.0, 5979.0], [48.0, 7614.5], [49.0, 3026.5], [51.0, 5007.0], [50.0, 13766.0], [52.0, 3312.0], [53.0, 4539.666666666666], [54.0, 1807.0], [55.0, 8872.0], [56.0, 2652.75], [57.0, 2758.5], [59.0, 2582.5], [58.0, 3445.0], [60.0, 12097.0], [61.0, 2366.6666666666665], [62.0, 2326.5], [63.0, 9252.0], [64.0, 3819.5], [65.0, 2443.3333333333335], [67.0, 1902.75], [66.0, 2956.0], [70.0, 5724.0], [71.0, 5416.0], [69.0, 7711.0], [68.0, 3009.0], [72.0, 2298.5], [73.0, 2225.5], [74.0, 3592.5], [75.0, 6522.0], [78.0, 2462.6666666666665], [79.0, 2895.0], [77.0, 12227.0], [76.0, 12390.0], [83.0, 9305.0], [82.0, 8270.0], [81.0, 6153.0], [80.0, 3985.0], [84.0, 3460.5], [86.0, 4917.0], [87.0, 6958.5], [85.0, 5691.0], [88.0, 3164.6666666666665], [91.0, 6878.5], [90.0, 5322.0], [89.0, 12026.0], [92.0, 3245.5], [93.0, 4143.333333333333], [95.0, 4749.5], [94.0, 7596.0], [99.0, 3236.5], [98.0, 1427.0], [97.0, 1478.0], [96.0, 7185.0], [100.0, 5934.5000000000055], [1.0, 5792.0]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[87.9259868421052, 5734.986842105264]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)-Aggregated", "isController": true}, {"data": [[3.0, 7103.0], [4.0, 6105.0], [5.0, 8773.0], [6.0, 5028.0], [7.0, 10006.0], [8.0, 7090.0], [9.0, 12706.0], [10.0, 4750.0], [11.0, 9918.0], [12.0, 10058.0], [13.0, 13900.0], [14.0, 7906.0], [15.0, 7443.0], [16.0, 6479.0], [18.0, 7734.5], [19.0, 10305.0], [20.0, 7382.0], [21.0, 6691.0], [22.0, 12510.0], [23.0, 9430.0], [24.0, 13524.0], [25.0, 2621.0], [26.0, 3939.5], [27.0, 5252.0], [28.0, 2199.333333333333], [29.0, 7622.0], [30.0, 12669.0], [31.0, 4218.0], [32.0, 2077.0], [33.0, 6436.0], [35.0, 5185.0], [34.0, 8973.0], [36.0, 4312.0], [37.0, 5939.0], [38.0, 1358.6666666666667], [39.0, 3254.8333333333335], [41.0, 10657.0], [40.0, 5965.0], [43.0, 8448.0], [42.0, 3832.0], [44.0, 2422.0], [45.0, 6110.5], [47.0, 6842.0], [46.0, 5871.0], [48.0, 7560.0], [49.0, 2971.5], [51.0, 4900.0], [50.0, 13665.0], [52.0, 3258.0], [53.0, 4506.0], [54.0, 1807.0], [55.0, 8799.666666666666], [56.0, 2625.5], [57.0, 2708.0], [59.0, 2526.5], [58.0, 3343.0], [60.0, 12045.5], [61.0, 2332.3333333333335], [62.0, 2274.5], [63.0, 9140.0], [64.0, 3768.5], [65.0, 2407.0], [67.0, 1874.5], [66.0, 2853.0], [70.0, 5667.5], [71.0, 5308.0], [69.0, 7598.0], [68.0, 2907.0], [72.0, 2243.5], [73.0, 2199.5], [74.0, 3541.0], [75.0, 6415.0], [78.0, 2425.0], [79.0, 2793.0], [77.0, 12115.0], [76.0, 12287.0], [83.0, 9197.0], [82.0, 8169.0], [81.0, 6046.0], [80.0, 3875.0], [84.0, 3404.0], [86.0, 4864.5], [87.0, 6905.0], [85.0, 5583.0], [88.0, 3130.6666666666665], [91.0, 6824.0], [90.0, 5220.0], [89.0, 11918.0], [92.0, 3191.0], [93.0, 4109.333333333333], [95.0, 4693.5], [94.0, 7495.0], [99.0, 4315.333333333333], [98.0, 2854.0], [97.0, 2956.0], [96.0, 7083.0], [100.0, 5947.835955056185], [1.0, 5690.0]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}, {"data": [[87.85596026490069, 5756.081125827813]], "isOverall": false, "label": "GET / Startseite laden-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8120.0, "minX": 1.75250106E12, "maxY": 96845.0, "series": [{"data": [[1.75250106E12, 96845.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75250106E12, 8120.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75250106E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5734.986842105264, "minX": 1.75250106E12, "maxY": 5756.081125827813, "series": [{"data": [[1.75250106E12, 5734.986842105264]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[1.75250106E12, 5756.081125827813]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75250106E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75250106E12, "maxY": 5755.536423841058, "series": [{"data": [[1.75250106E12, 0.0]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[1.75250106E12, 5755.536423841058]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75250106E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 893.2730263157896, "minX": 1.75250106E12, "maxY": 925.6788079470213, "series": [{"data": [[1.75250106E12, 893.2730263157896]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)", "isController": true}, {"data": [[1.75250106E12, 925.6788079470213]], "isOverall": false, "label": "GET / Startseite laden", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75250106E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75250106E12, "maxY": 22275.0, "series": [{"data": [[1.75250106E12, 22275.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75250106E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75250106E12, 11262.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75250106E12, 17373.150000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75250106E12, 5017.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75250106E12, 13367.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75250106E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2010.5, "minX": 7.0, "maxY": 7753.0, "series": [{"data": [[8.0, 6100.5], [32.0, 4763.0], [9.0, 5256.0], [11.0, 5768.0], [12.0, 4796.5], [50.0, 6486.5], [13.0, 7498.0], [52.0, 7753.0], [14.0, 2238.0], [15.0, 3615.0], [16.0, 4951.0], [17.0, 2086.5], [18.0, 2010.5], [19.0, 7167.0], [20.0, 5921.0], [21.0, 4138.0], [22.0, 7003.0], [25.0, 4751.0], [7.0, 5540.0], [30.0, 5480.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 52.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1396.5, "minX": 7.0, "maxY": 7496.0, "series": [{"data": [[8.0, 6100.0], [32.0, 1426.5], [9.0, 5256.0], [11.0, 5767.0], [12.0, 4795.5], [50.0, 1906.5], [13.0, 7496.0], [52.0, 2210.0], [14.0, 2238.0], [15.0, 3615.0], [16.0, 4950.0], [17.0, 2086.0], [18.0, 2010.5], [19.0, 7167.0], [20.0, 5920.0], [21.0, 4138.0], [22.0, 2244.0], [25.0, 2955.0], [7.0, 5538.0], [30.0, 1396.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 52.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.733333333333333, "minX": 1.75250106E12, "maxY": 11.733333333333333, "series": [{"data": [[1.75250106E12, 11.733333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75250106E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.75250106E12, "maxY": 11.666666666666666, "series": [{"data": [[1.75250106E12, 11.666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75250106E12, 0.06666666666666667]], "isOverall": false, "label": "EMPTY_RES_CODE", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75250106E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.066666666666666, "minX": 1.75250106E12, "maxY": 10.133333333333333, "series": [{"data": [[1.75250106E12, 10.066666666666666]], "isOverall": false, "label": "GET / Startseite laden-success", "isController": false}, {"data": [[1.75250106E12, 10.133333333333333]], "isOverall": false, "label": "Testfall 1 - Startseite laden (Lasttest)-success", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75250106E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 20.2, "minX": 1.75250106E12, "maxY": 20.2, "series": [{"data": [[1.75250106E12, 20.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75250106E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

